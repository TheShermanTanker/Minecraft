package net.minecraft.data.advancements;

import com.google.common.collect.ImmutableList;
import java.util.List;
import java.util.function.Consumer;
import net.minecraft.advancements.Advancement;
import net.minecraft.advancements.AdvancementFrameType;
import net.minecraft.advancements.AdvancementRequirements;
import net.minecraft.advancements.AdvancementRewards;
import net.minecraft.advancements.critereon.CriterionConditionBlock;
import net.minecraft.advancements.critereon.CriterionConditionDamageSource;
import net.minecraft.advancements.critereon.CriterionConditionDistance;
import net.minecraft.advancements.critereon.CriterionConditionEntity;
import net.minecraft.advancements.critereon.CriterionConditionEntityEquipment;
import net.minecraft.advancements.critereon.CriterionConditionEntityFlags;
import net.minecraft.advancements.critereon.CriterionConditionItem;
import net.minecraft.advancements.critereon.CriterionConditionLocation;
import net.minecraft.advancements.critereon.CriterionConditionMobEffect;
import net.minecraft.advancements.critereon.CriterionConditionValue;
import net.minecraft.advancements.critereon.CriterionTriggerBrewedPotion;
import net.minecraft.advancements.critereon.CriterionTriggerChangedDimension;
import net.minecraft.advancements.critereon.CriterionTriggerConstructBeacon;
import net.minecraft.advancements.critereon.CriterionTriggerEffectsChanged;
import net.minecraft.advancements.critereon.CriterionTriggerInteractBlock;
import net.minecraft.advancements.critereon.CriterionTriggerInventoryChanged;
import net.minecraft.advancements.critereon.CriterionTriggerItemDurabilityChanged;
import net.minecraft.advancements.critereon.CriterionTriggerKilled;
import net.minecraft.advancements.critereon.CriterionTriggerLocation;
import net.minecraft.advancements.critereon.CriterionTriggerNetherTravel;
import net.minecraft.advancements.critereon.CriterionTriggerPlayerGeneratesContainerLoot;
import net.minecraft.advancements.critereon.CriterionTriggerPlayerInteractedWithEntity;
import net.minecraft.advancements.critereon.CriterionTriggerProperties;
import net.minecraft.advancements.critereon.CriterionTriggerSummonedEntity;
import net.minecraft.advancements.critereon.CriterionTriggerThrownItemPickedUpByEntity;
import net.minecraft.network.chat.ChatMessage;
import net.minecraft.resources.MinecraftKey;
import net.minecraft.resources.ResourceKey;
import net.minecraft.tags.TagsItem;
import net.minecraft.world.effect.MobEffectList;
import net.minecraft.world.entity.EntityTypes;
import net.minecraft.world.entity.monster.piglin.PiglinAI;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.World;
import net.minecraft.world.level.biome.BiomeBase;
import net.minecraft.world.level.biome.Biomes;
import net.minecraft.world.level.block.BlockRespawnAnchor;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.levelgen.feature.StructureGenerator;
import net.minecraft.world.level.storage.loot.LootTableInfo;
import net.minecraft.world.level.storage.loot.predicates.LootItemConditionEntityProperty;

public class AdvancementsNether implements Consumer<Consumer<Advancement>> {
    private static final List<ResourceKey<BiomeBase>> EXPLORABLE_BIOMES = ImmutableList.of(Biomes.NETHER_WASTES, Biomes.SOUL_SAND_VALLEY, Biomes.WARPED_FOREST, Biomes.CRIMSON_FOREST, Biomes.BASALT_DELTAS);
    private static final CriterionConditionEntity.Composite DISTRACT_PIGLIN_PLAYER_ARMOR_PREDICATE = CriterionConditionEntity.Composite.create(LootItemConditionEntityProperty.hasProperties(LootTableInfo.EntityTarget.THIS, CriterionConditionEntity.Builder.entity().equipment(CriterionConditionEntityEquipment.Builder.equipment().head(CriterionConditionItem.Builder.item().of(Items.GOLDEN_HELMET).build()).build())).invert().build(), LootItemConditionEntityProperty.hasProperties(LootTableInfo.EntityTarget.THIS, CriterionConditionEntity.Builder.entity().equipment(CriterionConditionEntityEquipment.Builder.equipment().chest(CriterionConditionItem.Builder.item().of(Items.GOLDEN_CHESTPLATE).build()).build())).invert().build(), LootItemConditionEntityProperty.hasProperties(LootTableInfo.EntityTarget.THIS, CriterionConditionEntity.Builder.entity().equipment(CriterionConditionEntityEquipment.Builder.equipment().legs(CriterionConditionItem.Builder.item().of(Items.GOLDEN_LEGGINGS).build()).build())).invert().build(), LootItemConditionEntityProperty.hasProperties(LootTableInfo.EntityTarget.THIS, CriterionConditionEntity.Builder.entity().equipment(CriterionConditionEntityEquipment.Builder.equipment().feet(CriterionConditionItem.Builder.item().of(Items.GOLDEN_BOOTS).build()).build())).invert().build());

    @Override
    public void accept(Consumer<Advancement> consumer) {
        Advancement advancement = Advancement.SerializedAdvancement.advancement().display(Blocks.RED_NETHER_BRICKS, new ChatMessage("advancements.nether.root.title"), new ChatMessage("advancements.nether.root.description"), new MinecraftKey("textures/gui/advancements/backgrounds/nether.png"), AdvancementFrameType.TASK, false, false, false).addCriterion("entered_nether", CriterionTriggerChangedDimension.CriterionInstanceTrigger.changedDimensionTo(World.NETHER)).save(consumer, "nether/root");
        Advancement advancement2 = Advancement.SerializedAdvancement.advancement().parent(advancement).display(Items.FIRE_CHARGE, new ChatMessage("advancements.nether.return_to_sender.title"), new ChatMessage("advancements.nether.return_to_sender.description"), (MinecraftKey)null, AdvancementFrameType.CHALLENGE, true, true, false).rewards(AdvancementRewards.Builder.experience(50)).addCriterion("killed_ghast", CriterionTriggerKilled.CriterionInstanceTrigger.playerKilledEntity(CriterionConditionEntity.Builder.entity().of(EntityTypes.GHAST), CriterionConditionDamageSource.Builder.damageType().isProjectile(true).direct(CriterionConditionEntity.Builder.entity().of(EntityTypes.FIREBALL)))).save(consumer, "nether/return_to_sender");
        Advancement advancement3 = Advancement.SerializedAdvancement.advancement().parent(advancement).display(Blocks.NETHER_BRICKS, new ChatMessage("advancements.nether.find_fortress.title"), new ChatMessage("advancements.nether.find_fortress.description"), (MinecraftKey)null, AdvancementFrameType.TASK, true, true, false).addCriterion("fortress", CriterionTriggerLocation.CriterionInstanceTrigger.located(CriterionConditionLocation.inFeature(StructureGenerator.NETHER_BRIDGE))).save(consumer, "nether/find_fortress");
        Advancement.SerializedAdvancement.advancement().parent(advancement).display(Items.MAP, new ChatMessage("advancements.nether.fast_travel.title"), new ChatMessage("advancements.nether.fast_travel.description"), (MinecraftKey)null, AdvancementFrameType.CHALLENGE, true, true, false).rewards(AdvancementRewards.Builder.experience(100)).addCriterion("travelled", CriterionTriggerNetherTravel.CriterionInstanceTrigger.travelledThroughNether(CriterionConditionDistance.horizontal(CriterionConditionValue.DoubleRange.atLeast(7000.0D)))).save(consumer, "nether/fast_travel");
        Advancement.SerializedAdvancement.advancement().parent(advancement2).display(Items.GHAST_TEAR, new ChatMessage("advancements.nether.uneasy_alliance.title"), new ChatMessage("advancements.nether.uneasy_alliance.description"), (MinecraftKey)null, AdvancementFrameType.CHALLENGE, true, true, false).rewards(AdvancementRewards.Builder.experience(100)).addCriterion("killed_ghast", CriterionTriggerKilled.CriterionInstanceTrigger.playerKilledEntity(CriterionConditionEntity.Builder.entity().of(EntityTypes.GHAST).located(CriterionConditionLocation.inDimension(World.OVERWORLD)))).save(consumer, "nether/uneasy_alliance");
        Advancement advancement4 = Advancement.SerializedAdvancement.advancement().parent(advancement3).display(Blocks.WITHER_SKELETON_SKULL, new ChatMessage("advancements.nether.get_wither_skull.title"), new ChatMessage("advancements.nether.get_wither_skull.description"), (MinecraftKey)null, AdvancementFrameType.TASK, true, true, false).addCriterion("wither_skull", CriterionTriggerInventoryChanged.CriterionInstanceTrigger.hasItems(Blocks.WITHER_SKELETON_SKULL)).save(consumer, "nether/get_wither_skull");
        Advancement advancement5 = Advancement.SerializedAdvancement.advancement().parent(advancement4).display(Items.NETHER_STAR, new ChatMessage("advancements.nether.summon_wither.title"), new ChatMessage("advancements.nether.summon_wither.description"), (MinecraftKey)null, AdvancementFrameType.TASK, true, true, false).addCriterion("summoned", CriterionTriggerSummonedEntity.CriterionInstanceTrigger.summonedEntity(CriterionConditionEntity.Builder.entity().of(EntityTypes.WITHER))).save(consumer, "nether/summon_wither");
        Advancement advancement6 = Advancement.SerializedAdvancement.advancement().parent(advancement3).display(Items.BLAZE_ROD, new ChatMessage("advancements.nether.obtain_blaze_rod.title"), new ChatMessage("advancements.nether.obtain_blaze_rod.description"), (MinecraftKey)null, AdvancementFrameType.TASK, true, true, false).addCriterion("blaze_rod", CriterionTriggerInventoryChanged.CriterionInstanceTrigger.hasItems(Items.BLAZE_ROD)).save(consumer, "nether/obtain_blaze_rod");
        Advancement advancement7 = Advancement.SerializedAdvancement.advancement().parent(advancement5).display(Blocks.BEACON, new ChatMessage("advancements.nether.create_beacon.title"), new ChatMessage("advancements.nether.create_beacon.description"), (MinecraftKey)null, AdvancementFrameType.TASK, true, true, false).addCriterion("beacon", CriterionTriggerConstructBeacon.CriterionInstanceTrigger.constructedBeacon(CriterionConditionValue.IntegerRange.atLeast(1))).save(consumer, "nether/create_beacon");
        Advancement.SerializedAdvancement.advancement().parent(advancement7).display(Blocks.BEACON, new ChatMessage("advancements.nether.create_full_beacon.title"), new ChatMessage("advancements.nether.create_full_beacon.description"), (MinecraftKey)null, AdvancementFrameType.GOAL, true, true, false).addCriterion("beacon", CriterionTriggerConstructBeacon.CriterionInstanceTrigger.constructedBeacon(CriterionConditionValue.IntegerRange.exactly(4))).save(consumer, "nether/create_full_beacon");
        Advancement advancement8 = Advancement.SerializedAdvancement.advancement().parent(advancement6).display(Items.POTION, new ChatMessage("advancements.nether.brew_potion.title"), new ChatMessage("advancements.nether.brew_potion.description"), (MinecraftKey)null, AdvancementFrameType.TASK, true, true, false).addCriterion("potion", CriterionTriggerBrewedPotion.CriterionInstanceTrigger.brewedPotion()).save(consumer, "nether/brew_potion");
        Advancement advancement9 = Advancement.SerializedAdvancement.advancement().parent(advancement8).display(Items.MILK_BUCKET, new ChatMessage("advancements.nether.all_potions.title"), new ChatMessage("advancements.nether.all_potions.description"), (MinecraftKey)null, AdvancementFrameType.CHALLENGE, true, true, false).rewards(AdvancementRewards.Builder.experience(100)).addCriterion("all_effects", CriterionTriggerEffectsChanged.CriterionInstanceTrigger.hasEffects(CriterionConditionMobEffect.effects().and(MobEffectList.MOVEMENT_SPEED).and(MobEffectList.MOVEMENT_SLOWDOWN).and(MobEffectList.DAMAGE_BOOST).and(MobEffectList.JUMP).and(MobEffectList.REGENERATION).and(MobEffectList.FIRE_RESISTANCE).and(MobEffectList.WATER_BREATHING).and(MobEffectList.INVISIBILITY).and(MobEffectList.NIGHT_VISION).and(MobEffectList.WEAKNESS).and(MobEffectList.POISON).and(MobEffectList.SLOW_FALLING).and(MobEffectList.DAMAGE_RESISTANCE))).save(consumer, "nether/all_potions");
        Advancement.SerializedAdvancement.advancement().parent(advancement9).display(Items.BUCKET, new ChatMessage("advancements.nether.all_effects.title"), new ChatMessage("advancements.nether.all_effects.description"), (MinecraftKey)null, AdvancementFrameType.CHALLENGE, true, true, true).rewards(AdvancementRewards.Builder.experience(1000)).addCriterion("all_effects", CriterionTriggerEffectsChanged.CriterionInstanceTrigger.hasEffects(CriterionConditionMobEffect.effects().and(MobEffectList.MOVEMENT_SPEED).and(MobEffectList.MOVEMENT_SLOWDOWN).and(MobEffectList.DAMAGE_BOOST).and(MobEffectList.JUMP).and(MobEffectList.REGENERATION).and(MobEffectList.FIRE_RESISTANCE).and(MobEffectList.WATER_BREATHING).and(MobEffectList.INVISIBILITY).and(MobEffectList.NIGHT_VISION).and(MobEffectList.WEAKNESS).and(MobEffectList.POISON).and(MobEffectList.WITHER).and(MobEffectList.DIG_SPEED).and(MobEffectList.DIG_SLOWDOWN).and(MobEffectList.LEVITATION).and(MobEffectList.GLOWING).and(MobEffectList.ABSORPTION).and(MobEffectList.HUNGER).and(MobEffectList.CONFUSION).and(MobEffectList.DAMAGE_RESISTANCE).and(MobEffectList.SLOW_FALLING).and(MobEffectList.CONDUIT_POWER).and(MobEffectList.DOLPHINS_GRACE).and(MobEffectList.BLINDNESS).and(MobEffectList.BAD_OMEN).and(MobEffectList.HERO_OF_THE_VILLAGE))).save(consumer, "nether/all_effects");
        Advancement advancement10 = Advancement.SerializedAdvancement.advancement().parent(advancement).display(Items.ANCIENT_DEBRIS, new ChatMessage("advancements.nether.obtain_ancient_debris.title"), new ChatMessage("advancements.nether.obtain_ancient_debris.description"), (MinecraftKey)null, AdvancementFrameType.TASK, true, true, false).addCriterion("ancient_debris", CriterionTriggerInventoryChanged.CriterionInstanceTrigger.hasItems(Items.ANCIENT_DEBRIS)).save(consumer, "nether/obtain_ancient_debris");
        Advancement.SerializedAdvancement.advancement().parent(advancement10).display(Items.NETHERITE_CHESTPLATE, new ChatMessage("advancements.nether.netherite_armor.title"), new ChatMessage("advancements.nether.netherite_armor.description"), (MinecraftKey)null, AdvancementFrameType.CHALLENGE, true, true, false).rewards(AdvancementRewards.Builder.experience(100)).addCriterion("netherite_armor", CriterionTriggerInventoryChanged.CriterionInstanceTrigger.hasItems(Items.NETHERITE_HELMET, Items.NETHERITE_CHESTPLATE, Items.NETHERITE_LEGGINGS, Items.NETHERITE_BOOTS)).save(consumer, "nether/netherite_armor");
        Advancement.SerializedAdvancement.advancement().parent(advancement10).display(Items.LODESTONE, new ChatMessage("advancements.nether.use_lodestone.title"), new ChatMessage("advancements.nether.use_lodestone.description"), (MinecraftKey)null, AdvancementFrameType.TASK, true, true, false).addCriterion("use_lodestone", CriterionTriggerInteractBlock.CriterionInstanceTrigger.itemUsedOnBlock(CriterionConditionLocation.Builder.location().setBlock(CriterionConditionBlock.Builder.block().of(Blocks.LODESTONE).build()), CriterionConditionItem.Builder.item().of(Items.COMPASS))).save(consumer, "nether/use_lodestone");
        Advancement advancement11 = Advancement.SerializedAdvancement.advancement().parent(advancement).display(Items.CRYING_OBSIDIAN, new ChatMessage("advancements.nether.obtain_crying_obsidian.title"), new ChatMessage("advancements.nether.obtain_crying_obsidian.description"), (MinecraftKey)null, AdvancementFrameType.TASK, true, true, false).addCriterion("crying_obsidian", CriterionTriggerInventoryChanged.CriterionInstanceTrigger.hasItems(Items.CRYING_OBSIDIAN)).save(consumer, "nether/obtain_crying_obsidian");
        Advancement.SerializedAdvancement.advancement().parent(advancement11).display(Items.RESPAWN_ANCHOR, new ChatMessage("advancements.nether.charge_respawn_anchor.title"), new ChatMessage("advancements.nether.charge_respawn_anchor.description"), (MinecraftKey)null, AdvancementFrameType.TASK, true, true, false).addCriterion("charge_respawn_anchor", CriterionTriggerInteractBlock.CriterionInstanceTrigger.itemUsedOnBlock(CriterionConditionLocation.Builder.location().setBlock(CriterionConditionBlock.Builder.block().of(Blocks.RESPAWN_ANCHOR).setProperties(CriterionTriggerProperties.Builder.properties().hasProperty(BlockRespawnAnchor.CHARGE, 4).build()).build()), CriterionConditionItem.Builder.item().of(Blocks.GLOWSTONE))).save(consumer, "nether/charge_respawn_anchor");
        Advancement advancement12 = Advancement.SerializedAdvancement.advancement().parent(advancement).display(Items.WARPED_FUNGUS_ON_A_STICK, new ChatMessage("advancements.nether.ride_strider.title"), new ChatMessage("advancements.nether.ride_strider.description"), (MinecraftKey)null, AdvancementFrameType.TASK, true, true, false).addCriterion("used_warped_fungus_on_a_stick", CriterionTriggerItemDurabilityChanged.CriterionInstanceTrigger.changedDurability(CriterionConditionEntity.Composite.wrap(CriterionConditionEntity.Builder.entity().vehicle(CriterionConditionEntity.Builder.entity().of(EntityTypes.STRIDER).build()).build()), CriterionConditionItem.Builder.item().of(Items.WARPED_FUNGUS_ON_A_STICK).build(), CriterionConditionValue.IntegerRange.ANY)).save(consumer, "nether/ride_strider");
        AdvancementsAdventure.addBiomes(Advancement.SerializedAdvancement.advancement(), EXPLORABLE_BIOMES).parent(advancement12).display(Items.NETHERITE_BOOTS, new ChatMessage("advancements.nether.explore_nether.title"), new ChatMessage("advancements.nether.explore_nether.description"), (MinecraftKey)null, AdvancementFrameType.CHALLENGE, true, true, false).rewards(AdvancementRewards.Builder.experience(500)).save(consumer, "nether/explore_nether");
        Advancement advancement13 = Advancement.SerializedAdvancement.advancement().parent(advancement).display(Items.POLISHED_BLACKSTONE_BRICKS, new ChatMessage("advancements.nether.find_bastion.title"), new ChatMessage("advancements.nether.find_bastion.description"), (MinecraftKey)null, AdvancementFrameType.TASK, true, true, false).addCriterion("bastion", CriterionTriggerLocation.CriterionInstanceTrigger.located(CriterionConditionLocation.inFeature(StructureGenerator.BASTION_REMNANT))).save(consumer, "nether/find_bastion");
        Advancement.SerializedAdvancement.advancement().parent(advancement13).display(Blocks.CHEST, new ChatMessage("advancements.nether.loot_bastion.title"), new ChatMessage("advancements.nether.loot_bastion.description"), (MinecraftKey)null, AdvancementFrameType.TASK, true, true, false).requirements(AdvancementRequirements.OR).addCriterion("loot_bastion_other", CriterionTriggerPlayerGeneratesContainerLoot.CriterionInstanceTrigger.lootTableUsed(new MinecraftKey("minecraft:chests/bastion_other"))).addCriterion("loot_bastion_treasure", CriterionTriggerPlayerGeneratesContainerLoot.CriterionInstanceTrigger.lootTableUsed(new MinecraftKey("minecraft:chests/bastion_treasure"))).addCriterion("loot_bastion_hoglin_stable", CriterionTriggerPlayerGeneratesContainerLoot.CriterionInstanceTrigger.lootTableUsed(new MinecraftKey("minecraft:chests/bastion_hoglin_stable"))).addCriterion("loot_bastion_bridge", CriterionTriggerPlayerGeneratesContainerLoot.CriterionInstanceTrigger.lootTableUsed(new MinecraftKey("minecraft:chests/bastion_bridge"))).save(consumer, "nether/loot_bastion");
        Advancement.SerializedAdvancement.advancement().parent(advancement).requirements(AdvancementRequirements.OR).display(Items.GOLD_INGOT, new ChatMessage("advancements.nether.distract_piglin.title"), new ChatMessage("advancements.nether.distract_piglin.description"), (MinecraftKey)null, AdvancementFrameType.TASK, true, true, false).addCriterion("distract_piglin", CriterionTriggerThrownItemPickedUpByEntity.CriterionInstanceTrigger.itemPickedUpByEntity(DISTRACT_PIGLIN_PLAYER_ARMOR_PREDICATE, CriterionConditionItem.Builder.item().of(TagsItem.PIGLIN_LOVED), CriterionConditionEntity.Composite.wrap(CriterionConditionEntity.Builder.entity().of(EntityTypes.PIGLIN).flags(CriterionConditionEntityFlags.Builder.flags().setIsBaby(false).build()).build()))).addCriterion("distract_piglin_directly", CriterionTriggerPlayerInteractedWithEntity.CriterionInstanceTrigger.itemUsedOnEntity(DISTRACT_PIGLIN_PLAYER_ARMOR_PREDICATE, CriterionConditionItem.Builder.item().of(PiglinAI.BARTERING_ITEM), CriterionConditionEntity.Composite.wrap(CriterionConditionEntity.Builder.entity().of(EntityTypes.PIGLIN).flags(CriterionConditionEntityFlags.Builder.flags().setIsBaby(false).build()).build()))).save(consumer, "nether/distract_piglin");
    }
}
