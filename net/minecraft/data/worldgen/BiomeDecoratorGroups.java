package net.minecraft.data.worldgen;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.OptionalInt;
import java.util.function.Supplier;
import net.minecraft.core.BlockPosition;
import net.minecraft.core.EnumDirection;
import net.minecraft.core.IRegistry;
import net.minecraft.data.RegistryGeneration;
import net.minecraft.resources.MinecraftKey;
import net.minecraft.server.level.WorldServer;
import net.minecraft.tags.TagsBlock;
import net.minecraft.util.random.SimpleWeightedRandomList;
import net.minecraft.util.valueproviders.BiasedToBottomInt;
import net.minecraft.util.valueproviders.ClampedInt;
import net.minecraft.util.valueproviders.ClampedNormalFloat;
import net.minecraft.util.valueproviders.ConstantInt;
import net.minecraft.util.valueproviders.IntProvider;
import net.minecraft.util.valueproviders.UniformFloat;
import net.minecraft.util.valueproviders.UniformInt;
import net.minecraft.world.level.block.BlockDripleafBig;
import net.minecraft.world.level.block.BlockDripleafSmall;
import net.minecraft.world.level.block.BlockHugeMushroom;
import net.minecraft.world.level.block.BlockSweetBerryBush;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.CaveVines;
import net.minecraft.world.level.block.CaveVinesBlock;
import net.minecraft.world.level.block.state.IBlockData;
import net.minecraft.world.level.block.state.properties.BlockProperties;
import net.minecraft.world.level.levelgen.GeodeBlockSettings;
import net.minecraft.world.level.levelgen.GeodeCrackSettings;
import net.minecraft.world.level.levelgen.GeodeLayerSettings;
import net.minecraft.world.level.levelgen.HeightMap;
import net.minecraft.world.level.levelgen.VerticalAnchor;
import net.minecraft.world.level.levelgen.WorldGenStage;
import net.minecraft.world.level.levelgen.feature.FossilFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.WorldGenFeatureConfigured;
import net.minecraft.world.level.levelgen.feature.WorldGenFeatureHugeFungiConfiguration;
import net.minecraft.world.level.levelgen.feature.WorldGenerator;
import net.minecraft.world.level.levelgen.feature.blockplacers.WorldGenBlockPlacerColumn;
import net.minecraft.world.level.levelgen.feature.blockplacers.WorldGenBlockPlacerDoublePlant;
import net.minecraft.world.level.levelgen.feature.blockplacers.WorldGenBlockPlacerSimple;
import net.minecraft.world.level.levelgen.feature.configurations.DripstoneClusterConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.GeodeConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.GlowLichenConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.GrowingPlantConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.HeightmapConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.LargeDripstoneConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.RootSystemConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.SmallDripstoneConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.UnderwaterMagmaConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.VegetationPatchConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenDecoratorFrequencyConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenEndGatewayConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureBasaltColumnsConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureBlockConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureBlockPileConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureChanceDecoratorRangeConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureChoiceConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureCircleConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfigurationChance;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureDecoratorConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureDecoratorNoiseConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureDeltaConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureEmptyConfiguration2;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureEndSpikeConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureHellFlowingLavaConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureLakeConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureMushroomConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureOreConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureRadiusConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureRandom2;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureRandomChoiceConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureRandomPatchConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureReplaceBlockConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration;
import net.minecraft.world.level.levelgen.feature.featuresize.FeatureSizeThreeLayers;
import net.minecraft.world.level.levelgen.feature.featuresize.FeatureSizeTwoLayers;
import net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerAcacia;
import net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerBlob;
import net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerBush;
import net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerDarkOak;
import net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerFancy;
import net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerJungle;
import net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerMegaPine;
import net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerPine;
import net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerSpruce;
import net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoliagePlacerRandomSpread;
import net.minecraft.world.level.levelgen.feature.stateproviders.RandomizedIntStateProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviderForestFlower;
import net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviderPlainFlower;
import net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviderRotatedBlock;
import net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviderSimpl;
import net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviderWeighted;
import net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTreeAlterGround;
import net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTreeBeehive;
import net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTreeCocoa;
import net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTreeVineLeaves;
import net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTreeVineTrunk;
import net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacerBending;
import net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacerDarkOak;
import net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacerFancy;
import net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacerForking;
import net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacerGiant;
import net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacerMegaJungle;
import net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacerStraight;
import net.minecraft.world.level.levelgen.heightproviders.BiasedToBottomHeight;
import net.minecraft.world.level.levelgen.heightproviders.UniformHeight;
import net.minecraft.world.level.levelgen.heightproviders.VeryBiasedToBottomHeight;
import net.minecraft.world.level.levelgen.placement.CaveDecoratorConfiguration;
import net.minecraft.world.level.levelgen.placement.CaveSurface;
import net.minecraft.world.level.levelgen.placement.WaterDepthThresholdConfiguration;
import net.minecraft.world.level.levelgen.placement.WorldGenDecorator;
import net.minecraft.world.level.levelgen.placement.WorldGenDecoratorCarveMaskConfiguration;
import net.minecraft.world.level.levelgen.placement.WorldGenDecoratorConfigured;
import net.minecraft.world.level.levelgen.placement.WorldGenDecoratorDungeonConfiguration;
import net.minecraft.world.level.levelgen.placement.WorldGenDecoratorFrequencyExtraChanceConfiguration;
import net.minecraft.world.level.levelgen.placement.WorldGenDecoratorNoiseConfiguration;
import net.minecraft.world.level.material.Fluid;
import net.minecraft.world.level.material.FluidTypes;

public class BiomeDecoratorGroups {
    public static final WorldGenFeatureConfigured<?, ?> END_SPIKE = register("end_spike", WorldGenerator.END_SPIKE.configured(new WorldGenFeatureEndSpikeConfiguration(false, ImmutableList.of(), (BlockPosition)null)));
    public static final WorldGenFeatureConfigured<?, ?> END_GATEWAY = register("end_gateway", WorldGenerator.END_GATEWAY.configured(WorldGenEndGatewayConfiguration.knownExit(WorldServer.END_SPAWN_POINT, true)).decorated(WorldGenDecorator.END_GATEWAY.configured(WorldGenFeatureDecoratorConfiguration.NONE)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP).squared().rarity(700));
    public static final WorldGenFeatureConfigured<?, ?> END_GATEWAY_DELAYED = register("end_gateway_delayed", WorldGenerator.END_GATEWAY.configured(WorldGenEndGatewayConfiguration.delayedExitSearch()));
    public static final WorldGenFeatureConfigured<?, ?> CHORUS_PLANT = register("chorus_plant", WorldGenerator.CHORUS_PLANT.configured(WorldGenFeatureConfiguration.NONE).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_SQUARE).countRandom(4));
    public static final WorldGenFeatureConfigured<?, ?> END_ISLAND = register("end_island", WorldGenerator.END_ISLAND.configured(WorldGenFeatureConfiguration.NONE));
    public static final WorldGenFeatureConfigured<?, ?> END_ISLAND_DECORATED = register("end_island_decorated", END_ISLAND.rangeUniform(VerticalAnchor.absolute(55), VerticalAnchor.absolute(70)).squared().decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(1, 0.25F, 1))).rarity(14));
    public static final WorldGenFeatureConfigured<?, ?> DELTA = register("delta", WorldGenerator.DELTA_FEATURE.configured(new WorldGenFeatureDeltaConfiguration(BiomeDecoratorGroups.States.LAVA, BiomeDecoratorGroups.States.MAGMA_BLOCK, UniformInt.of(3, 7), UniformInt.of(0, 2))).decorated(WorldGenDecorator.COUNT_MULTILAYER.configured(new WorldGenDecoratorFrequencyConfiguration(40))));
    public static final WorldGenFeatureConfigured<?, ?> SMALL_BASALT_COLUMNS = register("small_basalt_columns", WorldGenerator.BASALT_COLUMNS.configured(new WorldGenFeatureBasaltColumnsConfiguration(ConstantInt.of(1), UniformInt.of(1, 4))).decorated(WorldGenDecorator.COUNT_MULTILAYER.configured(new WorldGenDecoratorFrequencyConfiguration(4))));
    public static final WorldGenFeatureConfigured<?, ?> LARGE_BASALT_COLUMNS = register("large_basalt_columns", WorldGenerator.BASALT_COLUMNS.configured(new WorldGenFeatureBasaltColumnsConfiguration(UniformInt.of(2, 3), UniformInt.of(5, 10))).decorated(WorldGenDecorator.COUNT_MULTILAYER.configured(new WorldGenDecoratorFrequencyConfiguration(2))));
    public static final WorldGenFeatureConfigured<?, ?> BASALT_BLOBS = register("basalt_blobs", WorldGenerator.REPLACE_BLOBS.configured(new WorldGenFeatureRadiusConfiguration(BiomeDecoratorGroups.States.NETHERRACK, BiomeDecoratorGroups.States.BASALT, UniformInt.of(3, 7))).range(BiomeDecoratorGroups.Decorators.FULL_RANGE).squared().count(75));
    public static final WorldGenFeatureConfigured<?, ?> BLACKSTONE_BLOBS = register("blackstone_blobs", WorldGenerator.REPLACE_BLOBS.configured(new WorldGenFeatureRadiusConfiguration(BiomeDecoratorGroups.States.NETHERRACK, BiomeDecoratorGroups.States.BLACKSTONE, UniformInt.of(3, 7))).range(BiomeDecoratorGroups.Decorators.FULL_RANGE).squared().count(25));
    public static final WorldGenFeatureConfigured<?, ?> GLOWSTONE_EXTRA = register("glowstone_extra", WorldGenerator.GLOWSTONE_BLOB.configured(WorldGenFeatureConfiguration.NONE).range(BiomeDecoratorGroups.Decorators.RANGE_4_4).squared().count(BiasedToBottomInt.of(0, 9)));
    public static final WorldGenFeatureConfigured<?, ?> GLOWSTONE = register("glowstone", WorldGenerator.GLOWSTONE_BLOB.configured(WorldGenFeatureConfiguration.NONE).range(BiomeDecoratorGroups.Decorators.FULL_RANGE).squared().count(10));
    public static final WorldGenFeatureConfigured<?, ?> CRIMSON_FOREST_VEGETATION = register("crimson_forest_vegetation", WorldGenerator.NETHER_FOREST_VEGETATION.configured(BiomeDecoratorGroups.Configs.CRIMSON_FOREST_CONFIG).decorated(WorldGenDecorator.COUNT_MULTILAYER.configured(new WorldGenDecoratorFrequencyConfiguration(6))));
    public static final WorldGenFeatureConfigured<?, ?> WARPED_FOREST_VEGETATION = register("warped_forest_vegetation", WorldGenerator.NETHER_FOREST_VEGETATION.configured(BiomeDecoratorGroups.Configs.WARPED_FOREST_CONFIG).decorated(WorldGenDecorator.COUNT_MULTILAYER.configured(new WorldGenDecoratorFrequencyConfiguration(5))));
    public static final WorldGenFeatureConfigured<?, ?> NETHER_SPROUTS = register("nether_sprouts", WorldGenerator.NETHER_FOREST_VEGETATION.configured(BiomeDecoratorGroups.Configs.NETHER_SPROUTS_CONFIG).decorated(WorldGenDecorator.COUNT_MULTILAYER.configured(new WorldGenDecoratorFrequencyConfiguration(4))));
    public static final WorldGenFeatureConfigured<?, ?> TWISTING_VINES = register("twisting_vines", WorldGenerator.TWISTING_VINES.configured(WorldGenFeatureConfiguration.NONE).range(BiomeDecoratorGroups.Decorators.FULL_RANGE).squared().count(10));
    public static final WorldGenFeatureConfigured<?, ?> WEEPING_VINES = register("weeping_vines", WorldGenerator.WEEPING_VINES.configured(WorldGenFeatureConfiguration.NONE).range(BiomeDecoratorGroups.Decorators.FULL_RANGE).squared().count(10));
    public static final WorldGenFeatureConfigured<?, ?> BASALT_PILLAR = register("basalt_pillar", WorldGenerator.BASALT_PILLAR.configured(WorldGenFeatureConfiguration.NONE).range(BiomeDecoratorGroups.Decorators.FULL_RANGE).squared().count(10));
    public static final WorldGenFeatureConfigured<?, ?> SEAGRASS_COLD = register("seagrass_cold", WorldGenerator.SEAGRASS.configured(new WorldGenFeatureConfigurationChance(0.3F)).count(32).decorated(BiomeDecoratorGroups.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> SEAGRASS_DEEP_COLD = register("seagrass_deep_cold", WorldGenerator.SEAGRASS.configured(new WorldGenFeatureConfigurationChance(0.8F)).count(40).decorated(BiomeDecoratorGroups.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> SEAGRASS_NORMAL = register("seagrass_normal", WorldGenerator.SEAGRASS.configured(new WorldGenFeatureConfigurationChance(0.3F)).count(48).decorated(BiomeDecoratorGroups.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> SEAGRASS_RIVER = register("seagrass_river", WorldGenerator.SEAGRASS.configured(new WorldGenFeatureConfigurationChance(0.4F)).count(48).decorated(BiomeDecoratorGroups.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> SEAGRASS_DEEP = register("seagrass_deep", WorldGenerator.SEAGRASS.configured(new WorldGenFeatureConfigurationChance(0.8F)).count(48).decorated(BiomeDecoratorGroups.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> SEAGRASS_SWAMP = register("seagrass_swamp", WorldGenerator.SEAGRASS.configured(new WorldGenFeatureConfigurationChance(0.6F)).count(64).decorated(BiomeDecoratorGroups.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> SEAGRASS_WARM = register("seagrass_warm", WorldGenerator.SEAGRASS.configured(new WorldGenFeatureConfigurationChance(0.3F)).count(80).decorated(BiomeDecoratorGroups.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> SEAGRASS_DEEP_WARM = register("seagrass_deep_warm", WorldGenerator.SEAGRASS.configured(new WorldGenFeatureConfigurationChance(0.8F)).count(80).decorated(BiomeDecoratorGroups.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> SEA_PICKLE = register("sea_pickle", WorldGenerator.SEA_PICKLE.configured(new WorldGenDecoratorFrequencyConfiguration(20)).decorated(BiomeDecoratorGroups.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE).rarity(16));
    public static final WorldGenFeatureConfigured<?, ?> ICE_SPIKE = register("ice_spike", WorldGenerator.ICE_SPIKE.configured(WorldGenFeatureConfiguration.NONE).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_SQUARE).count(3));
    public static final WorldGenFeatureConfigured<?, ?> ICE_PATCH = register("ice_patch", WorldGenerator.ICE_PATCH.configured(new WorldGenFeatureCircleConfiguration(BiomeDecoratorGroups.States.PACKED_ICE, UniformInt.of(2, 3), 1, ImmutableList.of(BiomeDecoratorGroups.States.DIRT, BiomeDecoratorGroups.States.GRASS_BLOCK, BiomeDecoratorGroups.States.PODZOL, BiomeDecoratorGroups.States.COARSE_DIRT, BiomeDecoratorGroups.States.MYCELIUM, BiomeDecoratorGroups.States.SNOW_BLOCK, BiomeDecoratorGroups.States.ICE))).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_SQUARE).count(2));
    public static final WorldGenFeatureConfigured<?, ?> FOREST_ROCK = register("forest_rock", WorldGenerator.FOREST_ROCK.configured(new WorldGenFeatureLakeConfiguration(BiomeDecoratorGroups.States.MOSSY_COBBLESTONE)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_SQUARE).countRandom(2));
    public static final WorldGenFeatureConfigured<?, ?> SEAGRASS_SIMPLE = register("seagrass_simple", WorldGenerator.SIMPLE_BLOCK.configured(new WorldGenFeatureBlockConfiguration(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SEAGRASS), ImmutableList.of(BiomeDecoratorGroups.States.STONE), ImmutableList.of(BiomeDecoratorGroups.States.WATER), ImmutableList.of(BiomeDecoratorGroups.States.WATER))).rarity(10).decorated(WorldGenDecorator.CARVING_MASK.configured(new WorldGenDecoratorCarveMaskConfiguration(WorldGenStage.Features.LIQUID))));
    public static final WorldGenFeatureConfigured<?, ?> ICEBERG_PACKED = register("iceberg_packed", WorldGenerator.ICEBERG.configured(new WorldGenFeatureLakeConfiguration(BiomeDecoratorGroups.States.PACKED_ICE)).decorated(WorldGenDecorator.ICEBERG.configured(WorldGenFeatureEmptyConfiguration2.INSTANCE)).rarity(16));
    public static final WorldGenFeatureConfigured<?, ?> ICEBERG_BLUE = register("iceberg_blue", WorldGenerator.ICEBERG.configured(new WorldGenFeatureLakeConfiguration(BiomeDecoratorGroups.States.BLUE_ICE)).decorated(WorldGenDecorator.ICEBERG.configured(WorldGenFeatureEmptyConfiguration2.INSTANCE)).rarity(200));
    public static final WorldGenFeatureConfigured<?, ?> KELP_COLD = register("kelp_cold", WorldGenerator.KELP.configured(WorldGenFeatureConfiguration.NONE).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_TOP_SOLID).squared().decorated(WorldGenDecorator.COUNT_NOISE_BIASED.configured(new WorldGenDecoratorNoiseConfiguration(120, 80.0D, 0.0D))));
    public static final WorldGenFeatureConfigured<?, ?> KELP_WARM = register("kelp_warm", WorldGenerator.KELP.configured(WorldGenFeatureConfiguration.NONE).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_TOP_SOLID).squared().decorated(WorldGenDecorator.COUNT_NOISE_BIASED.configured(new WorldGenDecoratorNoiseConfiguration(80, 80.0D, 0.0D))));
    public static final WorldGenFeatureConfigured<?, ?> BLUE_ICE = register("blue_ice", WorldGenerator.BLUE_ICE.configured(WorldGenFeatureConfiguration.NONE).rangeUniform(VerticalAnchor.absolute(30), VerticalAnchor.absolute(61)).squared().countRandom(19));
    public static final WorldGenFeatureConfigured<?, ?> BAMBOO_LIGHT = register("bamboo_light", WorldGenerator.BAMBOO.configured(new WorldGenFeatureConfigurationChance(0.0F)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(16));
    public static final WorldGenFeatureConfigured<?, ?> BAMBOO = register("bamboo", WorldGenerator.BAMBOO.configured(new WorldGenFeatureConfigurationChance(0.2F)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WORLD_SURFACE).squared().decorated(WorldGenDecorator.COUNT_NOISE_BIASED.configured(new WorldGenDecoratorNoiseConfiguration(160, 80.0D, 0.3D))));
    public static final WorldGenFeatureConfigured<?, ?> VINES = register("vines", WorldGenerator.VINES.configured(WorldGenFeatureConfiguration.NONE).squared().count(50));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_VINES = register("prototype_vines", WorldGenerator.VINES.configured(WorldGenFeatureConfiguration.NONE).rangeUniform(VerticalAnchor.absolute(64), VerticalAnchor.absolute(100)).squared().count(127));
    public static final WorldGenFeatureConfigured<?, ?> LAKE_WATER = register("lake_water", WorldGenerator.LAKE.configured(new WorldGenFeatureLakeConfiguration(BiomeDecoratorGroups.States.WATER)).range(BiomeDecoratorGroups.Decorators.FULL_RANGE).squared().rarity(4));
    public static final WorldGenFeatureConfigured<?, ?> LAKE_LAVA = register("lake_lava", WorldGenerator.LAKE.configured(new WorldGenFeatureLakeConfiguration(BiomeDecoratorGroups.States.LAVA)).decorated(WorldGenDecorator.LAVA_LAKE.configured(new WorldGenDecoratorDungeonConfiguration(80))).range(new WorldGenFeatureChanceDecoratorRangeConfiguration(BiasedToBottomHeight.of(VerticalAnchor.bottom(), VerticalAnchor.top(), 8))).squared().rarity(8));
    public static final WorldGenFeatureConfigured<?, ?> DISK_CLAY = register("disk_clay", WorldGenerator.DISK.configured(new WorldGenFeatureCircleConfiguration(BiomeDecoratorGroups.States.CLAY, UniformInt.of(2, 3), 1, ImmutableList.of(BiomeDecoratorGroups.States.DIRT, BiomeDecoratorGroups.States.CLAY))).decorated(BiomeDecoratorGroups.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> DISK_GRAVEL = register("disk_gravel", WorldGenerator.DISK.configured(new WorldGenFeatureCircleConfiguration(BiomeDecoratorGroups.States.GRAVEL, UniformInt.of(2, 5), 2, ImmutableList.of(BiomeDecoratorGroups.States.DIRT, BiomeDecoratorGroups.States.GRASS_BLOCK))).decorated(BiomeDecoratorGroups.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> DISK_SAND = register("disk_sand", WorldGenerator.DISK.configured(new WorldGenFeatureCircleConfiguration(BiomeDecoratorGroups.States.SAND, UniformInt.of(2, 6), 2, ImmutableList.of(BiomeDecoratorGroups.States.DIRT, BiomeDecoratorGroups.States.GRASS_BLOCK))).decorated(BiomeDecoratorGroups.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE).count(3));
    public static final WorldGenFeatureConfigured<?, ?> FREEZE_TOP_LAYER = register("freeze_top_layer", WorldGenerator.FREEZE_TOP_LAYER.configured(WorldGenFeatureConfiguration.NONE));
    public static final WorldGenFeatureConfigured<?, ?> BONUS_CHEST = register("bonus_chest", WorldGenerator.BONUS_CHEST.configured(WorldGenFeatureConfiguration.NONE));
    public static final WorldGenFeatureConfigured<?, ?> VOID_START_PLATFORM = register("void_start_platform", WorldGenerator.VOID_START_PLATFORM.configured(WorldGenFeatureConfiguration.NONE));
    public static final WorldGenFeatureConfigured<?, ?> MONSTER_ROOM = register("monster_room", WorldGenerator.MONSTER_ROOM.configured(WorldGenFeatureConfiguration.NONE).range(BiomeDecoratorGroups.Decorators.FULL_RANGE).squared().count(8));
    public static final WorldGenFeatureConfigured<?, ?> WELL = register("desert_well", WorldGenerator.DESERT_WELL.configured(WorldGenFeatureConfiguration.NONE).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_SQUARE).rarity(1000));
    private static final ImmutableList<MinecraftKey> FOSSIL_STRUCTURES = ImmutableList.of(new MinecraftKey("fossil/spine_1"), new MinecraftKey("fossil/spine_2"), new MinecraftKey("fossil/spine_3"), new MinecraftKey("fossil/spine_4"), new MinecraftKey("fossil/skull_1"), new MinecraftKey("fossil/skull_2"), new MinecraftKey("fossil/skull_3"), new MinecraftKey("fossil/skull_4"));
    private static final ImmutableList<MinecraftKey> FOSSIL_COAL_STRUCTURES = ImmutableList.of(new MinecraftKey("fossil/spine_1_coal"), new MinecraftKey("fossil/spine_2_coal"), new MinecraftKey("fossil/spine_3_coal"), new MinecraftKey("fossil/spine_4_coal"), new MinecraftKey("fossil/skull_1_coal"), new MinecraftKey("fossil/skull_2_coal"), new MinecraftKey("fossil/skull_3_coal"), new MinecraftKey("fossil/skull_4_coal"));
    public static final WorldGenFeatureConfigured<?, ?> FOSSIL = register("fossil", WorldGenerator.FOSSIL.configured(new FossilFeatureConfiguration(FOSSIL_STRUCTURES, FOSSIL_COAL_STRUCTURES, ProcessorLists.FOSSIL_ROT, ProcessorLists.FOSSIL_COAL, 4)).rarity(64));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_FOSSIL_UPPER = register("prototype_fossil_upper", WorldGenerator.FOSSIL.configured(new FossilFeatureConfiguration(FOSSIL_STRUCTURES, FOSSIL_COAL_STRUCTURES, ProcessorLists.FOSSIL_ROT, ProcessorLists.FOSSIL_COAL, 4)).rangeUniform(VerticalAnchor.absolute(0), VerticalAnchor.top()).rarity(64));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_FOSSIL_LOWER = register("prototype_fossil_lower", WorldGenerator.FOSSIL.configured(new FossilFeatureConfiguration(FOSSIL_STRUCTURES, FOSSIL_COAL_STRUCTURES, ProcessorLists.FOSSIL_ROT, ProcessorLists.FOSSIL_DIAMONDS, 4)).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(-8)).rarity(64));
    public static final WorldGenFeatureConfigured<?, ?> SPRING_LAVA_DOUBLE = register("spring_lava_double", WorldGenerator.SPRING.configured(BiomeDecoratorGroups.Configs.LAVA_SPRING_CONFIG).range(new WorldGenFeatureChanceDecoratorRangeConfiguration(VeryBiasedToBottomHeight.of(VerticalAnchor.bottom(), VerticalAnchor.belowTop(8), 8))).squared().count(40));
    public static final WorldGenFeatureConfigured<?, ?> SPRING_LAVA = register("spring_lava", WorldGenerator.SPRING.configured(BiomeDecoratorGroups.Configs.LAVA_SPRING_CONFIG).range(new WorldGenFeatureChanceDecoratorRangeConfiguration(VeryBiasedToBottomHeight.of(VerticalAnchor.bottom(), VerticalAnchor.belowTop(8), 8))).squared().count(20));
    public static final WorldGenFeatureConfigured<?, ?> SPRING_DELTA = register("spring_delta", WorldGenerator.SPRING.configured(new WorldGenFeatureHellFlowingLavaConfiguration(BiomeDecoratorGroups.States.LAVA_STATE, true, 4, 1, ImmutableSet.of(Blocks.NETHERRACK, Blocks.SOUL_SAND, Blocks.GRAVEL, Blocks.MAGMA_BLOCK, Blocks.BLACKSTONE))).range(BiomeDecoratorGroups.Decorators.RANGE_4_4).squared().count(16));
    public static final WorldGenFeatureConfigured<?, ?> SPRING_CLOSED = register("spring_closed", WorldGenerator.SPRING.configured(BiomeDecoratorGroups.Configs.CLOSED_NETHER_SPRING_CONFIG).range(BiomeDecoratorGroups.Decorators.RANGE_10_10).squared().count(16));
    public static final WorldGenFeatureConfigured<?, ?> SPRING_CLOSED_DOUBLE = register("spring_closed_double", WorldGenerator.SPRING.configured(BiomeDecoratorGroups.Configs.CLOSED_NETHER_SPRING_CONFIG).range(BiomeDecoratorGroups.Decorators.RANGE_10_10).squared().count(32));
    public static final WorldGenFeatureConfigured<?, ?> SPRING_OPEN = register("spring_open", WorldGenerator.SPRING.configured(new WorldGenFeatureHellFlowingLavaConfiguration(BiomeDecoratorGroups.States.LAVA_STATE, false, 4, 1, ImmutableSet.of(Blocks.NETHERRACK))).range(BiomeDecoratorGroups.Decorators.RANGE_4_4).squared().count(8));
    public static final WorldGenFeatureConfigured<?, ?> SPRING_WATER = register("spring_water", WorldGenerator.SPRING.configured(new WorldGenFeatureHellFlowingLavaConfiguration(BiomeDecoratorGroups.States.WATER_STATE, true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE))).range(new WorldGenFeatureChanceDecoratorRangeConfiguration(BiasedToBottomHeight.of(VerticalAnchor.bottom(), VerticalAnchor.belowTop(8), 8))).squared().count(50));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_SPRING_WATER = register("prototype_spring_water", WorldGenerator.SPRING.configured(new WorldGenFeatureHellFlowingLavaConfiguration(BiomeDecoratorGroups.States.WATER_STATE, true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE, Blocks.DEEPSLATE, Blocks.TUFF))).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.top()).squared().count(50));
    public static final WorldGenFeatureConfigured<?, ?> PILE_HAY = register("pile_hay", WorldGenerator.BLOCK_PILE.configured(new WorldGenFeatureBlockPileConfiguration(new WorldGenFeatureStateProviderRotatedBlock(Blocks.HAY_BLOCK))));
    public static final WorldGenFeatureConfigured<?, ?> PILE_MELON = register("pile_melon", WorldGenerator.BLOCK_PILE.configured(new WorldGenFeatureBlockPileConfiguration(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.MELON))));
    public static final WorldGenFeatureConfigured<?, ?> PILE_SNOW = register("pile_snow", WorldGenerator.BLOCK_PILE.configured(new WorldGenFeatureBlockPileConfiguration(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SNOW))));
    public static final WorldGenFeatureConfigured<?, ?> PILE_ICE = register("pile_ice", WorldGenerator.BLOCK_PILE.configured(new WorldGenFeatureBlockPileConfiguration(new WorldGenFeatureStateProviderWeighted(weightedBlockStateBuilder().add(BiomeDecoratorGroups.States.BLUE_ICE, 1).add(BiomeDecoratorGroups.States.PACKED_ICE, 5)))));
    public static final WorldGenFeatureConfigured<?, ?> PILE_PUMPKIN = register("pile_pumpkin", WorldGenerator.BLOCK_PILE.configured(new WorldGenFeatureBlockPileConfiguration(new WorldGenFeatureStateProviderWeighted(weightedBlockStateBuilder().add(BiomeDecoratorGroups.States.PUMPKIN, 19).add(BiomeDecoratorGroups.States.JACK_O_LANTERN, 1)))));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_FIRE = register("patch_fire", WorldGenerator.RANDOM_PATCH.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.FIRE), WorldGenBlockPlacerSimple.INSTANCE)).tries(64).whitelist(ImmutableSet.of(BiomeDecoratorGroups.States.NETHERRACK.getBlock())).noProjection().build()).decorated(BiomeDecoratorGroups.Decorators.FIRE));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_SOUL_FIRE = register("patch_soul_fire", WorldGenerator.RANDOM_PATCH.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SOUL_FIRE), new WorldGenBlockPlacerSimple())).tries(64).whitelist(ImmutableSet.of(BiomeDecoratorGroups.States.SOUL_SOIL.getBlock())).noProjection().build()).decorated(BiomeDecoratorGroups.Decorators.FIRE));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_BROWN_MUSHROOM = register("patch_brown_mushroom", WorldGenerator.RANDOM_PATCH.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.BROWN_MUSHROOM), WorldGenBlockPlacerSimple.INSTANCE)).tries(64).noProjection().build()));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_RED_MUSHROOM = register("patch_red_mushroom", WorldGenerator.RANDOM_PATCH.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.RED_MUSHROOM), WorldGenBlockPlacerSimple.INSTANCE)).tries(64).noProjection().build()));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_CRIMSON_ROOTS = register("patch_crimson_roots", WorldGenerator.RANDOM_PATCH.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.CRIMSON_ROOTS), new WorldGenBlockPlacerSimple())).tries(64).noProjection().build()).range(BiomeDecoratorGroups.Decorators.FULL_RANGE));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_SUNFLOWER = register("patch_sunflower", WorldGenerator.RANDOM_PATCH.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SUNFLOWER), new WorldGenBlockPlacerDoublePlant())).tries(64).noProjection().build()).decorated(BiomeDecoratorGroups.Decorators.ADD_32).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_SQUARE).count(10));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_PUMPKIN = register("patch_pumpkin", WorldGenerator.RANDOM_PATCH.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.PUMPKIN), WorldGenBlockPlacerSimple.INSTANCE)).tries(64).whitelist(ImmutableSet.of(BiomeDecoratorGroups.States.GRASS_BLOCK.getBlock())).noProjection().build()).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).rarity(32));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_TAIGA_GRASS = register("patch_taiga_grass", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.TAIGA_GRASS_CONFIG));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_BERRY_BUSH = register("patch_berry_bush", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.SWEET_BERRY_BUSH_CONFIG));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_GRASS_PLAIN = register("patch_grass_plain", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.DEFAULT_GRASS_CONFIG).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).decorated(WorldGenDecorator.COUNT_NOISE.configured(new WorldGenFeatureDecoratorNoiseConfiguration(-0.8D, 5, 10))));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_GRASS_FOREST = register("patch_grass_forest", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.DEFAULT_GRASS_CONFIG).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(2));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_GRASS_BADLANDS = register("patch_grass_badlands", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.DEFAULT_GRASS_CONFIG).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_GRASS_SAVANNA = register("patch_grass_savanna", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.DEFAULT_GRASS_CONFIG).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(20));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_GRASS_NORMAL = register("patch_grass_normal", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.DEFAULT_GRASS_CONFIG).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(5));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_GRASS_TAIGA_2 = register("patch_grass_taiga_2", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.TAIGA_GRASS_CONFIG).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_GRASS_TAIGA = register("patch_grass_taiga", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.TAIGA_GRASS_CONFIG).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(7));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_GRASS_JUNGLE = register("patch_grass_jungle", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.JUNGLE_GRASS_CONFIG).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(25));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_DEAD_BUSH_2 = register("patch_dead_bush_2", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.DEAD_BUSH_CONFIG).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(2));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_DEAD_BUSH = register("patch_dead_bush", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.DEAD_BUSH_CONFIG).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_DEAD_BUSH_BADLANDS = register("patch_dead_bush_badlands", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.DEAD_BUSH_CONFIG).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(20));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_MELON = register("patch_melon", WorldGenerator.RANDOM_PATCH.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.MELON), WorldGenBlockPlacerSimple.INSTANCE)).tries(64).whitelist(ImmutableSet.of(BiomeDecoratorGroups.States.GRASS_BLOCK.getBlock())).canReplace().noProjection().build()).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_BERRY_SPARSE = register("patch_berry_sparse", PATCH_BERRY_BUSH.decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_BERRY_DECORATED = register("patch_berry_decorated", PATCH_BERRY_BUSH.decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).rarity(12));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_WATERLILLY = register("patch_waterlilly", WorldGenerator.RANDOM_PATCH.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.LILY_PAD), WorldGenBlockPlacerSimple.INSTANCE)).tries(10).build()).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(4));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_TALL_GRASS_2 = register("patch_tall_grass_2", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.TALL_GRASS_CONFIG).decorated(BiomeDecoratorGroups.Decorators.ADD_32).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP).squared().decorated(WorldGenDecorator.COUNT_NOISE.configured(new WorldGenFeatureDecoratorNoiseConfiguration(-0.8D, 0, 7))));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_TALL_GRASS = register("patch_tall_grass", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.TALL_GRASS_CONFIG).decorated(BiomeDecoratorGroups.Decorators.ADD_32).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_SQUARE).count(7));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_LARGE_FERN = register("patch_large_fern", WorldGenerator.RANDOM_PATCH.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.LARGE_FERN), new WorldGenBlockPlacerDoublePlant())).tries(64).noProjection().build()).decorated(BiomeDecoratorGroups.Decorators.ADD_32).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_SQUARE).count(7));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_CACTUS = register("patch_cactus", WorldGenerator.RANDOM_PATCH.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.CACTUS), new WorldGenBlockPlacerColumn(BiasedToBottomInt.of(1, 3)))).tries(10).noProjection().build()));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_CACTUS_DESERT = register("patch_cactus_desert", PATCH_CACTUS.decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(10));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_CACTUS_DECORATED = register("patch_cactus_decorated", PATCH_CACTUS.decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(5));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_SUGAR_CANE_SWAMP = register("patch_sugar_cane_swamp", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.SUGAR_CANE_CONFIG).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(20));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_SUGAR_CANE_DESERT = register("patch_sugar_cane_desert", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.SUGAR_CANE_CONFIG).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(60));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_SUGAR_CANE_BADLANDS = register("patch_sugar_cane_badlands", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.SUGAR_CANE_CONFIG).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(13));
    public static final WorldGenFeatureConfigured<?, ?> PATCH_SUGAR_CANE = register("patch_sugar_cane", WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.SUGAR_CANE_CONFIG).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(10));
    public static final WorldGenFeatureConfigured<?, ?> BROWN_MUSHROOM_NETHER = register("brown_mushroom_nether", PATCH_BROWN_MUSHROOM.range(BiomeDecoratorGroups.Decorators.FULL_RANGE).rarity(2));
    public static final WorldGenFeatureConfigured<?, ?> RED_MUSHROOM_NETHER = register("red_mushroom_nether", PATCH_RED_MUSHROOM.range(BiomeDecoratorGroups.Decorators.FULL_RANGE).rarity(2));
    public static final WorldGenFeatureConfigured<?, ?> BROWN_MUSHROOM_NORMAL = register("brown_mushroom_normal", PATCH_BROWN_MUSHROOM.decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).rarity(4));
    public static final WorldGenFeatureConfigured<?, ?> RED_MUSHROOM_NORMAL = register("red_mushroom_normal", PATCH_RED_MUSHROOM.decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE).rarity(8));
    public static final WorldGenFeatureConfigured<?, ?> BROWN_MUSHROOM_TAIGA = register("brown_mushroom_taiga", PATCH_BROWN_MUSHROOM.rarity(4).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> RED_MUSHROOM_TAIGA = register("red_mushroom_taiga", PATCH_RED_MUSHROOM.rarity(8).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_DOUBLE_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> BROWN_MUSHROOM_GIANT = register("brown_mushroom_giant", BROWN_MUSHROOM_TAIGA.count(3));
    public static final WorldGenFeatureConfigured<?, ?> RED_MUSHROOM_GIANT = register("red_mushroom_giant", RED_MUSHROOM_TAIGA.count(3));
    public static final WorldGenFeatureConfigured<?, ?> BROWN_MUSHROOM_SWAMP = register("brown_mushroom_swamp", BROWN_MUSHROOM_TAIGA.count(8));
    public static final WorldGenFeatureConfigured<?, ?> RED_MUSHROOM_SWAMP = register("red_mushroom_swamp", RED_MUSHROOM_TAIGA.count(8));
    public static final ImmutableList<WorldGenFeatureOreConfiguration.TargetBlockState> ORE_IRON_TARGET_LIST = ImmutableList.of(WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.STONE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.IRON_ORE), WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.DEEPSLATE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.DEEPSLATE_IRON_ORE));
    public static final ImmutableList<WorldGenFeatureOreConfiguration.TargetBlockState> ORE_REDSTONE_TARGET_LIST = ImmutableList.of(WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.STONE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.REDSTONE_ORE), WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.DEEPSLATE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.DEEPSLATE_REDSTONE_ORE));
    public static final ImmutableList<WorldGenFeatureOreConfiguration.TargetBlockState> ORE_GOLD_TARGET_LIST = ImmutableList.of(WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.STONE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.GOLD_ORE), WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.DEEPSLATE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.DEEPSLATE_GOLD_ORE));
    public static final ImmutableList<WorldGenFeatureOreConfiguration.TargetBlockState> ORE_DIAMOND_TARGET_LIST = ImmutableList.of(WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.STONE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.DIAMOND_ORE), WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.DEEPSLATE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.DEEPSLATE_DIAMOND_ORE));
    public static final ImmutableList<WorldGenFeatureOreConfiguration.TargetBlockState> ORE_LAPIS_TARGET_LIST = ImmutableList.of(WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.STONE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.LAPIS_ORE), WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.DEEPSLATE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.DEEPSLATE_LAPIS_ORE));
    public static final ImmutableList<WorldGenFeatureOreConfiguration.TargetBlockState> ORE_EMERALD_TARGET_LIST = ImmutableList.of(WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.STONE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.EMERALD_ORE), WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.DEEPSLATE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.DEEPSLATE_EMERALD_ORE));
    public static final ImmutableList<WorldGenFeatureOreConfiguration.TargetBlockState> ORE_COPPER_TARGET_LIST = ImmutableList.of(WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.STONE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.COPPER_ORE), WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.DEEPSLATE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.DEEPSLATE_COPPER_ORE));
    public static final ImmutableList<WorldGenFeatureOreConfiguration.TargetBlockState> ORE_COAL_TARGET_LIST = ImmutableList.of(WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.STONE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.COAL_ORE), WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.DEEPSLATE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.DEEPSLATE_COAL_ORE));
    public static final ImmutableList<WorldGenFeatureOreConfiguration.TargetBlockState> ORE_INFESTED_TARGET_LIST = ImmutableList.of(WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.STONE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.INFESTED_STONE), WorldGenFeatureOreConfiguration.target(WorldGenFeatureOreConfiguration.Target.DEEPSLATE_ORE_REPLACEABLES, BiomeDecoratorGroups.States.INFESTED_DEEPSLATE));
    public static final WorldGenFeatureOreConfiguration ORE_IRON_CONFIG = new WorldGenFeatureOreConfiguration(ORE_IRON_TARGET_LIST, 9);
    public static final WorldGenFeatureOreConfiguration ORE_REDSTONE_CONFIG = new WorldGenFeatureOreConfiguration(ORE_REDSTONE_TARGET_LIST, 8);
    public static final WorldGenFeatureConfigured<?, ?> ORE_MAGMA = register("ore_magma", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NETHERRACK, BiomeDecoratorGroups.States.MAGMA_BLOCK, 33)).rangeUniform(VerticalAnchor.absolute(27), VerticalAnchor.absolute(36)).squared().count(4));
    public static final WorldGenFeatureConfigured<?, ?> ORE_SOUL_SAND = register("ore_soul_sand", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NETHERRACK, BiomeDecoratorGroups.States.SOUL_SAND, 12)).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(31)).squared().count(12));
    public static final WorldGenFeatureConfigured<?, ?> ORE_GOLD_DELTAS = register("ore_gold_deltas", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NETHERRACK, BiomeDecoratorGroups.States.NETHER_GOLD_ORE, 10)).range(BiomeDecoratorGroups.Decorators.RANGE_10_10).squared().count(20));
    public static final WorldGenFeatureConfigured<?, ?> ORE_QUARTZ_DELTAS = register("ore_quartz_deltas", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NETHERRACK, BiomeDecoratorGroups.States.NETHER_QUARTZ_ORE, 14)).range(BiomeDecoratorGroups.Decorators.RANGE_10_10).squared().count(32));
    public static final WorldGenFeatureConfigured<?, ?> ORE_GOLD_NETHER = register("ore_gold_nether", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NETHERRACK, BiomeDecoratorGroups.States.NETHER_GOLD_ORE, 10)).range(BiomeDecoratorGroups.Decorators.RANGE_10_10).squared().count(10));
    public static final WorldGenFeatureConfigured<?, ?> ORE_QUARTZ_NETHER = register("ore_quartz_nether", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NETHERRACK, BiomeDecoratorGroups.States.NETHER_QUARTZ_ORE, 14)).range(BiomeDecoratorGroups.Decorators.RANGE_10_10).squared().count(16));
    public static final WorldGenFeatureConfigured<?, ?> ORE_GRAVEL_NETHER = register("ore_gravel_nether", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NETHERRACK, BiomeDecoratorGroups.States.GRAVEL, 33)).rangeUniform(VerticalAnchor.absolute(5), VerticalAnchor.absolute(41)).squared().count(2));
    public static final WorldGenFeatureConfigured<?, ?> ORE_BLACKSTONE = register("ore_blackstone", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NETHERRACK, BiomeDecoratorGroups.States.BLACKSTONE, 33)).rangeUniform(VerticalAnchor.absolute(5), VerticalAnchor.absolute(31)).squared().count(2));
    public static final WorldGenFeatureConfigured<?, ?> ORE_DIRT = register("ore_dirt", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NATURAL_STONE, BiomeDecoratorGroups.States.DIRT, 33)).rangeUniform(VerticalAnchor.absolute(0), VerticalAnchor.top()).squared().count(10));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_DIRT = register("prototype_ore_dirt", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NATURAL_STONE, BiomeDecoratorGroups.States.DIRT, 33)).rangeUniform(VerticalAnchor.absolute(0), VerticalAnchor.top()).squared().count(15));
    public static final WorldGenFeatureConfigured<?, ?> ORE_GRAVEL = register("ore_gravel", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NATURAL_STONE, BiomeDecoratorGroups.States.GRAVEL, 33)).rangeUniform(VerticalAnchor.absolute(0), VerticalAnchor.top()).squared().count(8));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_GRAVEL = register("prototype_ore_gravel", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NATURAL_STONE, BiomeDecoratorGroups.States.GRAVEL, 33)).rangeUniform(VerticalAnchor.absolute(0), VerticalAnchor.top()).squared().count(12));
    public static final WorldGenFeatureConfigured<?, ?> ORE_GRANITE = register("ore_granite", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NATURAL_STONE, BiomeDecoratorGroups.States.GRANITE, 33)).rangeUniform(VerticalAnchor.absolute(0), VerticalAnchor.absolute(79)).squared().count(10));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_GRANITE = register("prototype_ore_granite", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NATURAL_STONE, BiomeDecoratorGroups.States.GRANITE, 64)).rangeUniform(VerticalAnchor.absolute(0), VerticalAnchor.absolute(79)).squared().count(2));
    public static final WorldGenFeatureConfigured<?, ?> ORE_DIORITE = register("ore_diorite", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NATURAL_STONE, BiomeDecoratorGroups.States.DIORITE, 33)).rangeUniform(VerticalAnchor.absolute(0), VerticalAnchor.absolute(79)).squared().count(10));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_DIORITE = register("prototype_ore_diorite", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NATURAL_STONE, BiomeDecoratorGroups.States.DIORITE, 64)).rangeUniform(VerticalAnchor.absolute(0), VerticalAnchor.absolute(79)).squared().count(2));
    public static final WorldGenFeatureConfigured<?, ?> ORE_ANDESITE = register("ore_andesite", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NATURAL_STONE, BiomeDecoratorGroups.States.ANDESITE, 33)).rangeUniform(VerticalAnchor.absolute(0), VerticalAnchor.absolute(79)).squared().count(10));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_ANDESITE = register("prototype_ore_andesite", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NATURAL_STONE, BiomeDecoratorGroups.States.ANDESITE, 64)).rangeUniform(VerticalAnchor.absolute(0), VerticalAnchor.absolute(79)).squared().count(2));
    public static final WorldGenFeatureConfigured<?, ?> ORE_TUFF = register("ore_tuff", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NATURAL_STONE, BiomeDecoratorGroups.States.TUFF, 33)).rangeUniform(VerticalAnchor.absolute(0), VerticalAnchor.absolute(16)).squared().count(1));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_TUFF = register("prototype_ore_tuff", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NATURAL_STONE, BiomeDecoratorGroups.States.TUFF, 64)).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(0)).squared().count(2));
    public static final WorldGenFeatureConfigured<?, ?> ORE_DEEPSLATE = register("ore_deepslate", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NATURAL_STONE, BiomeDecoratorGroups.States.DEEPSLATE, 64)).rangeUniform(VerticalAnchor.absolute(0), VerticalAnchor.absolute(16)).squared().count(2));
    public static final WorldGenFeatureConfigured<?, ?> ORE_COAL = register("ore_coal", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_COAL_TARGET_LIST, 17)).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(127)).squared().count(20));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_COAL_UPPER = register("prototype_ore_coal_upper", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_COAL_TARGET_LIST, 17)).rangeUniform(VerticalAnchor.absolute(136), VerticalAnchor.top()).squared().count(30));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_COAL_LOWER = register("prototype_ore_coal_lower", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_COAL_TARGET_LIST, 17, 0.5F)).rangeTriangle(VerticalAnchor.absolute(0), VerticalAnchor.absolute(192)).squared().count(20));
    public static final WorldGenFeatureConfigured<?, ?> ORE_IRON = register("ore_iron", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_IRON_TARGET_LIST, 9)).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(63)).squared().count(20));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_IRON_UPPER = register("prototype_ore_iron_upper", WorldGenerator.ORE.configured(ORE_IRON_CONFIG).rangeTriangle(VerticalAnchor.absolute(128), VerticalAnchor.absolute(384)).squared().count(40));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_IRON_MIDDLE = register("prototype_ore_iron_middle", WorldGenerator.ORE.configured(ORE_IRON_CONFIG).rangeTriangle(VerticalAnchor.absolute(-24), VerticalAnchor.absolute(56)).squared().count(5));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_IRON_SMALL = register("prototype_ore_iron_small", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_IRON_TARGET_LIST, 4)).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(64)).squared().count(10));
    public static final WorldGenFeatureConfigured<?, ?> ORE_GOLD_EXTRA = register("ore_gold_extra", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_GOLD_TARGET_LIST, 9)).rangeUniform(VerticalAnchor.absolute(32), VerticalAnchor.absolute(79)).squared().count(20));
    public static final WorldGenFeatureConfigured<?, ?> ORE_GOLD = register("ore_gold", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_GOLD_TARGET_LIST, 9)).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(31)).squared().count(2));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_GOLD = register("prototype_ore_gold", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_GOLD_TARGET_LIST, 9, 0.5F)).rangeTriangle(VerticalAnchor.absolute(-64), VerticalAnchor.absolute(32)).squared().count(4));
    public static final WorldGenFeatureConfigured<?, ?> ORE_REDSTONE = register("ore_redstone", WorldGenerator.ORE.configured(ORE_REDSTONE_CONFIG).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(15)).squared().count(8));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_REDSTONE = register("prototype_ore_redstone", WorldGenerator.ORE.configured(ORE_REDSTONE_CONFIG).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(15)).squared().count(4));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_REDSTONE_LOWER = register("prototype_ore_redstone_lower", WorldGenerator.ORE.configured(ORE_REDSTONE_CONFIG).rangeTriangle(VerticalAnchor.aboveBottom(-32), VerticalAnchor.aboveBottom(32)).squared().count(8));
    public static final WorldGenFeatureConfigured<?, ?> ORE_DIAMOND = register("ore_diamond", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_DIAMOND_TARGET_LIST, 8)).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(15)).squared());
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_DIAMOND = register("prototype_ore_diamond", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_DIAMOND_TARGET_LIST, 4, 0.5F)).rangeTriangle(VerticalAnchor.aboveBottom(-80), VerticalAnchor.aboveBottom(80)).squared().count(6));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_DIAMOND_LARGE = register("prototype_ore_diamond_large", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_DIAMOND_TARGET_LIST, 12, 0.7F)).rangeTriangle(VerticalAnchor.aboveBottom(-80), VerticalAnchor.aboveBottom(80)).squared().rarity(9));
    public static final WorldGenFeatureConfigured<?, ?> ORE_LAPIS = register("ore_lapis", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_LAPIS_TARGET_LIST, 7)).rangeTriangle(VerticalAnchor.absolute(0), VerticalAnchor.absolute(30)).squared());
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_LAPIS = register("prototype_ore_lapis", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_LAPIS_TARGET_LIST, 7)).rangeTriangle(VerticalAnchor.absolute(-32), VerticalAnchor.absolute(32)).squared().count(2));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_LAPIS_BURIED = register("prototype_ore_lapis_buried", WorldGenerator.SCATTERED_ORE.configured(new WorldGenFeatureOreConfiguration(ORE_LAPIS_TARGET_LIST, 7, 1.0F)).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(64)).squared().count(4));
    public static final WorldGenFeatureConfigured<?, ?> ORE_INFESTED = register("ore_infested", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_INFESTED_TARGET_LIST, 9)).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(63)).squared().count(7));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_INFESTED = register("prototype_ore_infested", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_INFESTED_TARGET_LIST, 9)).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(63)).squared().count(14));
    public static final WorldGenFeatureConfigured<?, ?> ORE_EMERALD = register("ore_emerald", WorldGenerator.REPLACE_SINGLE_BLOCK.configured(new WorldGenFeatureReplaceBlockConfiguration(ORE_EMERALD_TARGET_LIST)).rangeUniform(VerticalAnchor.absolute(4), VerticalAnchor.absolute(31)).squared().count(UniformInt.of(3, 8)));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_EMERALD = register("prototype_ore_emerald", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_EMERALD_TARGET_LIST, 3)).rangeTriangle(VerticalAnchor.absolute(32), VerticalAnchor.absolute(480)).squared().count(50));
    public static final WorldGenFeatureConfigured<?, ?> ORE_DEBRIS_LARGE = register("ore_debris_large", WorldGenerator.SCATTERED_ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NETHER_ORE_REPLACEABLES, BiomeDecoratorGroups.States.ANCIENT_DEBRIS, 3, 1.0F)).rangeTriangle(VerticalAnchor.absolute(8), VerticalAnchor.absolute(24)).squared());
    public static final WorldGenFeatureConfigured<?, ?> ORE_DEBRIS_SMALL = register("ore_debris_small", WorldGenerator.SCATTERED_ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NETHER_ORE_REPLACEABLES, BiomeDecoratorGroups.States.ANCIENT_DEBRIS, 2, 1.0F)).range(BiomeDecoratorGroups.Decorators.RANGE_8_8).squared());
    public static final WorldGenFeatureConfigured<?, ?> ORE_COPPER = register("ore_copper", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_COPPER_TARGET_LIST, 10)).rangeTriangle(VerticalAnchor.absolute(0), VerticalAnchor.absolute(96)).squared().count(6));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_ORE_COPPER = register("prototype_ore_copper", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(ORE_COPPER_TARGET_LIST, 10)).rangeUniform(VerticalAnchor.absolute(0), VerticalAnchor.absolute(63)).squared().count(8));
    public static final WorldGenFeatureConfigured<?, ?> ORE_CLAY = register("ore_clay", WorldGenerator.ORE.configured(new WorldGenFeatureOreConfiguration(WorldGenFeatureOreConfiguration.Target.NATURAL_STONE, BiomeDecoratorGroups.States.CLAY, 33)).range(BiomeDecoratorGroups.Decorators.RANGE_BOTTOM_TO_60).squared().count(15));
    public static final WorldGenFeatureConfigured<?, ?> DRIPSTONE_CLUSTER_FEATURE = register("dripstone_cluster", WorldGenerator.DRIPSTONE_CLUSTER.configured(new DripstoneClusterConfiguration(12, UniformInt.of(3, 6), UniformInt.of(2, 8), 1, 3, UniformInt.of(2, 4), UniformFloat.of(0.3F, 0.7F), ClampedNormalFloat.of(0.1F, 0.3F, 0.1F, 0.9F), 0.1F, 3, 8)).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(59)).squared().count(UniformInt.of(10, 20)));
    public static final WorldGenFeatureConfigured<?, ?> LARGE_DRIPSTONE_FEATURE = register("large_dripstone", WorldGenerator.LARGE_DRIPSTONE.configured(new LargeDripstoneConfiguration(30, UniformInt.of(3, 19), UniformFloat.of(0.4F, 2.0F), 0.33F, UniformFloat.of(0.3F, 0.9F), UniformFloat.of(0.4F, 1.0F), UniformFloat.of(0.0F, 0.3F), 4, 0.6F)).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(59)).squared().count(UniformInt.of(2, 10)));
    public static final WorldGenFeatureConfigured<?, ?> SMALL_DRIPSTONE_FEATURE = register("small_dripstone", WorldGenerator.SMALL_DRIPSTONE.configured(new SmallDripstoneConfiguration(5, 10, 2, 0.2F)).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(59)).squared().count(UniformInt.of(40, 120)));
    public static final WorldGenFeatureConfigured<?, ?> RARE_DRIPSTONE_CLUSTER_FEATURE = register("rare_dripstone_cluster", WorldGenerator.DRIPSTONE_CLUSTER.configured(new DripstoneClusterConfiguration(12, UniformInt.of(3, 3), UniformInt.of(2, 6), 1, 3, UniformInt.of(2, 2), UniformFloat.of(0.3F, 0.4F), ClampedNormalFloat.of(0.1F, 0.3F, 0.1F, 0.9F), 0.1F, 3, 8)).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(59)).squared().count(UniformInt.of(10, 10)).rarity(25));
    public static final WorldGenFeatureConfigured<?, ?> RARE_SMALL_DRIPSTONE_FEATURE = register("rare_small_dripstone", WorldGenerator.SMALL_DRIPSTONE.configured(new SmallDripstoneConfiguration(5, 10, 2, 0.2F)).rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(59)).squared().count(UniformInt.of(40, 80)).rarity(30));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_UNDERWATER_MAGMA = register("prototype_underwater_magma", WorldGenerator.UNDERWATER_MAGMA.configured(new UnderwaterMagmaConfiguration(5, 1, 0.5F)).squared().rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(39)).count(UniformInt.of(4, 10)));
    public static final WorldGenFeatureConfigured<?, ?> GLOW_LICHEN = register("glow_lichen", WorldGenerator.GLOW_LICHEN.configured(new GlowLichenConfiguration(20, false, true, true, 0.5F, ImmutableList.of(Blocks.STONE.getBlockData(), Blocks.ANDESITE.getBlockData(), Blocks.DIORITE.getBlockData(), Blocks.GRANITE.getBlockData(), Blocks.DRIPSTONE_BLOCK.getBlockData(), Blocks.CALCITE.getBlockData(), Blocks.TUFF.getBlockData(), Blocks.DEEPSLATE.getBlockData()))).squared().rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(54)).count(UniformInt.of(20, 30)));
    public static final WorldGenFeatureConfigured<?, ?> PROTOTYPE_GLOW_LICHEN = register("prototype_glow_lichen", WorldGenerator.GLOW_LICHEN.configured(new GlowLichenConfiguration(20, false, true, true, 0.5F, ImmutableList.of(Blocks.STONE.getBlockData(), Blocks.ANDESITE.getBlockData(), Blocks.DIORITE.getBlockData(), Blocks.GRANITE.getBlockData(), Blocks.DRIPSTONE_BLOCK.getBlockData(), Blocks.CALCITE.getBlockData(), Blocks.TUFF.getBlockData(), Blocks.DEEPSLATE.getBlockData()))).squared().rangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(54)).count(UniformInt.of(40, 60)));
    public static final WorldGenFeatureConfigured<?, ?> CRIMSON_FUNGI = register("crimson_fungi", WorldGenerator.HUGE_FUNGUS.configured(WorldGenFeatureHugeFungiConfiguration.HUGE_CRIMSON_FUNGI_NOT_PLANTED_CONFIG).decorated(WorldGenDecorator.COUNT_MULTILAYER.configured(new WorldGenDecoratorFrequencyConfiguration(8))));
    public static final WorldGenFeatureConfigured<WorldGenFeatureHugeFungiConfiguration, ?> CRIMSON_FUNGI_PLANTED = register("crimson_fungi_planted", WorldGenerator.HUGE_FUNGUS.configured(WorldGenFeatureHugeFungiConfiguration.HUGE_CRIMSON_FUNGI_PLANTED_CONFIG));
    public static final WorldGenFeatureConfigured<?, ?> WARPED_FUNGI = register("warped_fungi", WorldGenerator.HUGE_FUNGUS.configured(WorldGenFeatureHugeFungiConfiguration.HUGE_WARPED_FUNGI_NOT_PLANTED_CONFIG).decorated(WorldGenDecorator.COUNT_MULTILAYER.configured(new WorldGenDecoratorFrequencyConfiguration(8))));
    public static final WorldGenFeatureConfigured<WorldGenFeatureHugeFungiConfiguration, ?> WARPED_FUNGI_PLANTED = register("warped_fungi_planted", WorldGenerator.HUGE_FUNGUS.configured(WorldGenFeatureHugeFungiConfiguration.HUGE_WARPED_FUNGI_PLANTED_CONFIG));
    public static final WorldGenFeatureConfigured<?, ?> HUGE_BROWN_MUSHROOM = register("huge_brown_mushroom", WorldGenerator.HUGE_BROWN_MUSHROOM.configured(new WorldGenFeatureMushroomConfiguration(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.HUGE_BROWN_MUSHROOM), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.HUGE_MUSHROOM_STEM), 3)));
    public static final WorldGenFeatureConfigured<?, ?> HUGE_RED_MUSHROOM = register("huge_red_mushroom", WorldGenerator.HUGE_RED_MUSHROOM.configured(new WorldGenFeatureMushroomConfiguration(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.HUGE_RED_MUSHROOM), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.HUGE_MUSHROOM_STEM), 2)));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> OAK = register("oak", WorldGenerator.TREE.configured((new WorldGenFeatureTreeConfiguration.TreeConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.OAK_LOG), new TrunkPlacerStraight(4, 2, 0), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.OAK_LEAVES), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.OAK_SAPLING), new WorldGenFoilagePlacerBlob(ConstantInt.of(2), ConstantInt.of(0), 3), new FeatureSizeTwoLayers(1, 0, 1))).ignoreVines().build()));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> DARK_OAK = register("dark_oak", WorldGenerator.TREE.configured((new WorldGenFeatureTreeConfiguration.TreeConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.DARK_OAK_LOG), new TrunkPlacerDarkOak(6, 2, 1), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.DARK_OAK_LEAVES), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.DARK_OAK_SAPLING), new WorldGenFoilagePlacerDarkOak(ConstantInt.of(0), ConstantInt.of(0)), new FeatureSizeThreeLayers(1, 1, 0, 1, 2, OptionalInt.empty()))).ignoreVines().build()));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> BIRCH = register("birch", WorldGenerator.TREE.configured((new WorldGenFeatureTreeConfiguration.TreeConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.BIRCH_LOG), new TrunkPlacerStraight(5, 2, 0), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.BIRCH_LEAVES), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.BIRCH_SAPLING), new WorldGenFoilagePlacerBlob(ConstantInt.of(2), ConstantInt.of(0), 3), new FeatureSizeTwoLayers(1, 0, 1))).ignoreVines().build()));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> ACACIA = register("acacia", WorldGenerator.TREE.configured((new WorldGenFeatureTreeConfiguration.TreeConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.ACACIA_LOG), new TrunkPlacerForking(5, 2, 2), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.ACACIA_LEAVES), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.ACACIA_SAPLING), new WorldGenFoilagePlacerAcacia(ConstantInt.of(2), ConstantInt.of(0)), new FeatureSizeTwoLayers(1, 0, 2))).ignoreVines().build()));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> SPRUCE = register("spruce", WorldGenerator.TREE.configured((new WorldGenFeatureTreeConfiguration.TreeConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SPRUCE_LOG), new TrunkPlacerStraight(5, 2, 1), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SPRUCE_LEAVES), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SPRUCE_SAPLING), new WorldGenFoilagePlacerSpruce(UniformInt.of(2, 3), UniformInt.of(0, 2), UniformInt.of(1, 2)), new FeatureSizeTwoLayers(2, 0, 2))).ignoreVines().build()));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> PINE = register("pine", WorldGenerator.TREE.configured((new WorldGenFeatureTreeConfiguration.TreeConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SPRUCE_LOG), new TrunkPlacerStraight(6, 4, 0), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SPRUCE_LEAVES), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SPRUCE_SAPLING), new WorldGenFoilagePlacerPine(ConstantInt.of(1), ConstantInt.of(1), UniformInt.of(3, 4)), new FeatureSizeTwoLayers(2, 0, 2))).ignoreVines().build()));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> JUNGLE_TREE = register("jungle_tree", WorldGenerator.TREE.configured((new WorldGenFeatureTreeConfiguration.TreeConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.JUNGLE_LOG), new TrunkPlacerStraight(4, 8, 0), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.JUNGLE_LEAVES), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.JUNGLE_SAPLING), new WorldGenFoilagePlacerBlob(ConstantInt.of(2), ConstantInt.of(0), 3), new FeatureSizeTwoLayers(1, 0, 1))).decorators(ImmutableList.of(new WorldGenFeatureTreeCocoa(0.2F), WorldGenFeatureTreeVineTrunk.INSTANCE, WorldGenFeatureTreeVineLeaves.INSTANCE)).ignoreVines().build()));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> FANCY_OAK = register("fancy_oak", WorldGenerator.TREE.configured((new WorldGenFeatureTreeConfiguration.TreeConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.OAK_LOG), new TrunkPlacerFancy(3, 11, 0), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.OAK_LEAVES), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.OAK_SAPLING), new WorldGenFoilagePlacerFancy(ConstantInt.of(2), ConstantInt.of(4), 4), new FeatureSizeTwoLayers(0, 0, 0, OptionalInt.of(4)))).ignoreVines().build()));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> JUNGLE_TREE_NO_VINE = register("jungle_tree_no_vine", WorldGenerator.TREE.configured((new WorldGenFeatureTreeConfiguration.TreeConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.JUNGLE_LOG), new TrunkPlacerStraight(4, 8, 0), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.JUNGLE_LEAVES), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.JUNGLE_SAPLING), new WorldGenFoilagePlacerBlob(ConstantInt.of(2), ConstantInt.of(0), 3), new FeatureSizeTwoLayers(1, 0, 1))).ignoreVines().build()));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> MEGA_JUNGLE_TREE = register("mega_jungle_tree", WorldGenerator.TREE.configured((new WorldGenFeatureTreeConfiguration.TreeConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.JUNGLE_LOG), new TrunkPlacerMegaJungle(10, 2, 19), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.JUNGLE_LEAVES), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.JUNGLE_SAPLING), new WorldGenFoilagePlacerJungle(ConstantInt.of(2), ConstantInt.of(0), 2), new FeatureSizeTwoLayers(1, 1, 2))).decorators(ImmutableList.of(WorldGenFeatureTreeVineTrunk.INSTANCE, WorldGenFeatureTreeVineLeaves.INSTANCE)).build()));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> MEGA_SPRUCE = register("mega_spruce", WorldGenerator.TREE.configured((new WorldGenFeatureTreeConfiguration.TreeConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SPRUCE_LOG), new TrunkPlacerGiant(13, 2, 14), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SPRUCE_LEAVES), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SPRUCE_SAPLING), new WorldGenFoilagePlacerMegaPine(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new FeatureSizeTwoLayers(1, 1, 2))).decorators(ImmutableList.of(new WorldGenFeatureTreeAlterGround(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.PODZOL)))).build()));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> MEGA_PINE = register("mega_pine", WorldGenerator.TREE.configured((new WorldGenFeatureTreeConfiguration.TreeConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SPRUCE_LOG), new TrunkPlacerGiant(13, 2, 14), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SPRUCE_LEAVES), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SPRUCE_SAPLING), new WorldGenFoilagePlacerMegaPine(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(3, 7)), new FeatureSizeTwoLayers(1, 1, 2))).decorators(ImmutableList.of(new WorldGenFeatureTreeAlterGround(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.PODZOL)))).build()));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> SUPER_BIRCH_BEES_0002 = register("super_birch_bees_0002", WorldGenerator.TREE.configured((new WorldGenFeatureTreeConfiguration.TreeConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.BIRCH_LOG), new TrunkPlacerStraight(5, 2, 6), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.BIRCH_LEAVES), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.BIRCH_SAPLING), new WorldGenFoilagePlacerBlob(ConstantInt.of(2), ConstantInt.of(0), 3), new FeatureSizeTwoLayers(1, 0, 1))).ignoreVines().decorators(ImmutableList.of(BiomeDecoratorGroups.Decorators.BEEHIVE_0002)).build()));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> SWAMP_OAK = register("swamp_oak", WorldGenerator.TREE.configured((new WorldGenFeatureTreeConfiguration.TreeConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.OAK_LOG), new TrunkPlacerStraight(5, 3, 0), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.OAK_LEAVES), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.OAK_SAPLING), new WorldGenFoilagePlacerBlob(ConstantInt.of(3), ConstantInt.of(0), 3), new FeatureSizeTwoLayers(1, 0, 1))).decorators(ImmutableList.of(WorldGenFeatureTreeVineLeaves.INSTANCE)).build()));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> JUNGLE_BUSH = register("jungle_bush", WorldGenerator.TREE.configured((new WorldGenFeatureTreeConfiguration.TreeConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.JUNGLE_LOG), new TrunkPlacerStraight(1, 0, 0), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.OAK_LEAVES), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.OAK_SAPLING), new WorldGenFoilagePlacerBush(ConstantInt.of(2), ConstantInt.of(1), 2), new FeatureSizeTwoLayers(0, 0, 0))).build()));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> AZALEA_TREE = register("azalea_tree", WorldGenerator.TREE.configured((new WorldGenFeatureTreeConfiguration.TreeConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.OAK_LOG), new TrunkPlacerBending(4, 2, 0, 3, UniformInt.of(1, 2)), new WorldGenFeatureStateProviderWeighted(weightedBlockStateBuilder().add(BiomeDecoratorGroups.States.AZALEA_LEAVES, 3).add(BiomeDecoratorGroups.States.FLOWERING_AZALEA_LEAVES, 1)), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.AZALEA), new WorldGenFoliagePlacerRandomSpread(ConstantInt.of(3), ConstantInt.of(0), ConstantInt.of(2), 50), new FeatureSizeTwoLayers(1, 0, 1))).dirt(new WorldGenFeatureStateProviderSimpl(Blocks.ROOTED_DIRT.getBlockData())).forceDirt().build()));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> OAK_BEES_0002 = register("oak_bees_0002", WorldGenerator.TREE.configured(OAK.config().withDecorators(ImmutableList.of(BiomeDecoratorGroups.Decorators.BEEHIVE_0002))));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> OAK_BEES_002 = register("oak_bees_002", WorldGenerator.TREE.configured(OAK.config().withDecorators(ImmutableList.of(BiomeDecoratorGroups.Decorators.BEEHIVE_002))));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> OAK_BEES_005 = register("oak_bees_005", WorldGenerator.TREE.configured(OAK.config().withDecorators(ImmutableList.of(BiomeDecoratorGroups.Decorators.BEEHIVE_005))));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> BIRCH_BEES_0002 = register("birch_bees_0002", WorldGenerator.TREE.configured(BIRCH.config().withDecorators(ImmutableList.of(BiomeDecoratorGroups.Decorators.BEEHIVE_0002))));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> BIRCH_BEES_002 = register("birch_bees_002", WorldGenerator.TREE.configured(BIRCH.config().withDecorators(ImmutableList.of(BiomeDecoratorGroups.Decorators.BEEHIVE_002))));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> BIRCH_BEES_005 = register("birch_bees_005", WorldGenerator.TREE.configured(BIRCH.config().withDecorators(ImmutableList.of(BiomeDecoratorGroups.Decorators.BEEHIVE_005))));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> FANCY_OAK_BEES_0002 = register("fancy_oak_bees_0002", WorldGenerator.TREE.configured(FANCY_OAK.config().withDecorators(ImmutableList.of(BiomeDecoratorGroups.Decorators.BEEHIVE_0002))));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> FANCY_OAK_BEES_002 = register("fancy_oak_bees_002", WorldGenerator.TREE.configured(FANCY_OAK.config().withDecorators(ImmutableList.of(BiomeDecoratorGroups.Decorators.BEEHIVE_002))));
    public static final WorldGenFeatureConfigured<WorldGenFeatureTreeConfiguration, ?> FANCY_OAK_BEES_005 = register("fancy_oak_bees_005", WorldGenerator.TREE.configured(FANCY_OAK.config().withDecorators(ImmutableList.of(BiomeDecoratorGroups.Decorators.BEEHIVE_005))));
    public static final WorldGenFeatureConfigured<?, ?> FLOWER_WARM = register("flower_warm", WorldGenerator.FLOWER.configured(BiomeDecoratorGroups.Configs.DEFAULT_FLOWER_CONFIG).decorated(BiomeDecoratorGroups.Decorators.ADD_32).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_SQUARE).count(4));
    public static final WorldGenFeatureConfigured<?, ?> FLOWER_DEFAULT = register("flower_default", WorldGenerator.FLOWER.configured(BiomeDecoratorGroups.Configs.DEFAULT_FLOWER_CONFIG).decorated(BiomeDecoratorGroups.Decorators.ADD_32).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_SQUARE).count(2));
    public static final WorldGenFeatureConfigured<?, ?> FLOWER_FOREST = register("flower_forest", WorldGenerator.FLOWER.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(WorldGenFeatureStateProviderForestFlower.INSTANCE, WorldGenBlockPlacerSimple.INSTANCE)).tries(64).build()).decorated(BiomeDecoratorGroups.Decorators.ADD_32).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_SQUARE).count(100));
    public static final WorldGenFeatureConfigured<?, ?> FLOWER_SWAMP = register("flower_swamp", WorldGenerator.FLOWER.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.BLUE_ORCHID), WorldGenBlockPlacerSimple.INSTANCE)).tries(64).build()).decorated(BiomeDecoratorGroups.Decorators.ADD_32).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> FLOWER_PLAIN = register("flower_plain", WorldGenerator.FLOWER.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(WorldGenFeatureStateProviderPlainFlower.INSTANCE, WorldGenBlockPlacerSimple.INSTANCE)).tries(64).build()));
    public static final WorldGenFeatureConfigured<?, ?> FLOWER_PLAIN_DECORATED = register("flower_plain_decorated", FLOWER_PLAIN.decorated(BiomeDecoratorGroups.Decorators.ADD_32).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP).squared().decorated(WorldGenDecorator.COUNT_NOISE.configured(new WorldGenFeatureDecoratorNoiseConfiguration(-0.8D, 15, 4))));
    private static final ImmutableList<Supplier<WorldGenFeatureConfigured<?, ?>>> FOREST_FLOWER_FEATURES = ImmutableList.of(() -> {
        return WorldGenerator.RANDOM_PATCH.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.LILAC), new WorldGenBlockPlacerDoublePlant())).tries(64).noProjection().build());
    }, () -> {
        return WorldGenerator.RANDOM_PATCH.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.ROSE_BUSH), new WorldGenBlockPlacerDoublePlant())).tries(64).noProjection().build());
    }, () -> {
        return WorldGenerator.RANDOM_PATCH.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.PEONY), new WorldGenBlockPlacerDoublePlant())).tries(64).noProjection().build());
    }, () -> {
        return WorldGenerator.NO_BONEMEAL_FLOWER.configured((new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.LILY_OF_THE_VALLEY), WorldGenBlockPlacerSimple.INSTANCE)).tries(64).build());
    });
    public static final WorldGenFeatureConfigured<?, ?> FOREST_FLOWER_VEGETATION_COMMON = register("forest_flower_vegetation_common", WorldGenerator.SIMPLE_RANDOM_SELECTOR.configured(new WorldGenFeatureRandom2(FOREST_FLOWER_FEATURES)).count(ClampedInt.of(UniformInt.of(-1, 3), 0, 3)).decorated(BiomeDecoratorGroups.Decorators.ADD_32).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_SQUARE).count(5));
    public static final WorldGenFeatureConfigured<?, ?> FOREST_FLOWER_VEGETATION = register("forest_flower_vegetation", WorldGenerator.SIMPLE_RANDOM_SELECTOR.configured(new WorldGenFeatureRandom2(FOREST_FLOWER_FEATURES)).count(ClampedInt.of(UniformInt.of(-3, 1), 0, 1)).decorated(BiomeDecoratorGroups.Decorators.ADD_32).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_SQUARE).count(5));
    public static final WorldGenFeatureConfigured<?, ?> DARK_FOREST_VEGETATION_BROWN = register("dark_forest_vegetation_brown", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(HUGE_BROWN_MUSHROOM.weighted(0.025F), HUGE_RED_MUSHROOM.weighted(0.05F), DARK_OAK.weighted(0.6666667F), BIRCH.weighted(0.2F), FANCY_OAK.weighted(0.1F)), OAK)).decorated(BiomeDecoratorGroups.Decorators.DARK_OAK_DECORATOR));
    public static final WorldGenFeatureConfigured<?, ?> DARK_FOREST_VEGETATION_RED = register("dark_forest_vegetation_red", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(HUGE_RED_MUSHROOM.weighted(0.025F), HUGE_BROWN_MUSHROOM.weighted(0.05F), DARK_OAK.weighted(0.6666667F), BIRCH.weighted(0.2F), FANCY_OAK.weighted(0.1F)), OAK)).decorated(BiomeDecoratorGroups.Decorators.DARK_OAK_DECORATOR));
    public static final WorldGenFeatureConfigured<?, ?> WARM_OCEAN_VEGETATION = register("warm_ocean_vegetation", WorldGenerator.SIMPLE_RANDOM_SELECTOR.configured(new WorldGenFeatureRandom2(ImmutableList.of(() -> {
        return WorldGenerator.CORAL_TREE.configured(WorldGenFeatureConfiguration.NONE);
    }, () -> {
        return WorldGenerator.CORAL_CLAW.configured(WorldGenFeatureConfiguration.NONE);
    }, () -> {
        return WorldGenerator.CORAL_MUSHROOM.configured(WorldGenFeatureConfiguration.NONE);
    }))).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_TOP_SOLID).squared().decorated(WorldGenDecorator.COUNT_NOISE_BIASED.configured(new WorldGenDecoratorNoiseConfiguration(20, 400.0D, 0.0D))));
    public static final WorldGenFeatureConfigured<?, ?> FOREST_FLOWER_TREES = register("forest_flower_trees", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(BIRCH_BEES_002.weighted(0.2F), FANCY_OAK_BEES_002.weighted(0.1F)), OAK_BEES_002)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(6, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> TAIGA_VEGETATION = register("taiga_vegetation", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(PINE.weighted(0.33333334F)), SPRUCE)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(10, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> TREES_BADLANDS = register("trees_badlands", OAK.decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(5, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> TREES_SNOWY = register("trees_snowy", SPRUCE.decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(0, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> TREES_SWAMP = register("trees_swamp", SWAMP_OAK.decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_OCEAN_FLOOR).decorated(WorldGenDecorator.WATER_DEPTH_THRESHOLD.configured(new WaterDepthThresholdConfiguration(1))).squared().decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(2, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> TREES_SHATTERED_SAVANNA = register("trees_shattered_savanna", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(ACACIA.weighted(0.8F)), OAK)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(2, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> TREES_SAVANNA = register("trees_savanna", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(ACACIA.weighted(0.8F)), OAK)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(1, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> BIRCH_TALL = register("birch_tall", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(SUPER_BIRCH_BEES_0002.weighted(0.5F)), BIRCH_BEES_0002)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(10, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> TREES_BIRCH = register("trees_birch", BIRCH_BEES_0002.decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(10, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> TREES_MOUNTAIN_EDGE = register("trees_mountain_edge", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(SPRUCE.weighted(0.666F), FANCY_OAK.weighted(0.1F)), OAK)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(3, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> TREES_MOUNTAIN = register("trees_mountain", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(SPRUCE.weighted(0.666F), FANCY_OAK.weighted(0.1F)), OAK)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(0, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> TREES_WATER = register("trees_water", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(FANCY_OAK.weighted(0.1F)), OAK)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(0, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> BIRCH_OTHER = register("birch_other", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(BIRCH_BEES_0002.weighted(0.2F), FANCY_OAK_BEES_0002.weighted(0.1F)), OAK_BEES_0002)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(10, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> PLAIN_VEGETATION = register("plain_vegetation", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(FANCY_OAK_BEES_005.weighted(0.33333334F)), OAK_BEES_005)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(0, 0.05F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> TREES_JUNGLE_EDGE = register("trees_jungle_edge", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(FANCY_OAK.weighted(0.1F), JUNGLE_BUSH.weighted(0.5F)), JUNGLE_TREE)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(2, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> TREES_GIANT_SPRUCE = register("trees_giant_spruce", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(MEGA_SPRUCE.weighted(0.33333334F), PINE.weighted(0.33333334F)), SPRUCE)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(10, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> TREES_GIANT = register("trees_giant", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(MEGA_SPRUCE.weighted(0.025641026F), MEGA_PINE.weighted(0.30769232F), PINE.weighted(0.33333334F)), SPRUCE)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(10, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> TREES_JUNGLE = register("trees_jungle", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(FANCY_OAK.weighted(0.1F), JUNGLE_BUSH.weighted(0.5F), MEGA_JUNGLE_TREE.weighted(0.33333334F)), JUNGLE_TREE)).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(50, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> BAMBOO_VEGETATION = register("bamboo_vegetation", WorldGenerator.RANDOM_SELECTOR.configured(new WorldGenFeatureRandomChoiceConfiguration(ImmutableList.of(FANCY_OAK.weighted(0.05F), JUNGLE_BUSH.weighted(0.15F), MEGA_JUNGLE_TREE.weighted(0.7F)), WorldGenerator.RANDOM_PATCH.configured(BiomeDecoratorGroups.Configs.JUNGLE_GRASS_CONFIG))).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED).decorated(WorldGenDecorator.COUNT_EXTRA.configured(new WorldGenDecoratorFrequencyExtraChanceConfiguration(30, 0.1F, 1))));
    public static final WorldGenFeatureConfigured<?, ?> MUSHROOM_FIELD_VEGETATION = register("mushroom_field_vegetation", WorldGenerator.RANDOM_BOOLEAN_SELECTOR.configured(new WorldGenFeatureChoiceConfiguration(() -> {
        return HUGE_RED_MUSHROOM;
    }, () -> {
        return HUGE_BROWN_MUSHROOM;
    })).decorated(BiomeDecoratorGroups.Decorators.HEIGHTMAP_SQUARE));
    public static final WorldGenFeatureConfigured<?, ?> ROOTED_AZALEA_TREES = register("rooted_azalea_trees", WorldGenerator.ROOT_SYSTEM.configured(new RootSystemConfiguration(() -> {
        return AZALEA_TREE;
    }, 3, 3, TagsBlock.LUSH_GROUND_REPLACEABLE.getName(), new WorldGenFeatureStateProviderSimpl(Blocks.ROOTED_DIRT.getBlockData()), 20, 100, 3, 2, new WorldGenFeatureStateProviderSimpl(Blocks.HANGING_ROOTS.getBlockData()), 20, 2)).decorated(WorldGenDecorator.CAVE_SURFACE.configured(new CaveDecoratorConfiguration(CaveSurface.CEILING, 12))).range(BiomeDecoratorGroups.Decorators.RANGE_BOTTOM_TO_60).squared().rarity(2));
    private static final WorldGenFeatureStateProviderWeighted CAVE_VINES_BODY_PROVIDER = new WorldGenFeatureStateProviderWeighted(weightedBlockStateBuilder().add(Blocks.CAVE_VINES_PLANT.getBlockData(), 4).add(Blocks.CAVE_VINES_PLANT.getBlockData().set(CaveVines.BERRIES, Boolean.valueOf(true)), 1));
    private static final RandomizedIntStateProvider CAVE_VINES_HEAD_PROVIDER = new RandomizedIntStateProvider(new WorldGenFeatureStateProviderWeighted(weightedBlockStateBuilder().add(Blocks.CAVE_VINES.getBlockData(), 4).add(Blocks.CAVE_VINES.getBlockData().set(CaveVines.BERRIES, Boolean.valueOf(true)), 1)), CaveVinesBlock.AGE, UniformInt.of(17, 25));
    public static final WorldGenFeatureConfigured<GrowingPlantConfiguration, ?> CAVE_VINE = register("cave_vine", WorldGenerator.GROWING_PLANT.configured(new GrowingPlantConfiguration(SimpleWeightedRandomList.<IntProvider>builder().add(UniformInt.of(1, 20), 2).add(UniformInt.of(1, 3), 3).add(UniformInt.of(1, 7), 10).build(), EnumDirection.DOWN, CAVE_VINES_BODY_PROVIDER, CAVE_VINES_HEAD_PROVIDER, false)));
    public static final WorldGenFeatureConfigured<GrowingPlantConfiguration, ?> CAVE_VINE_IN_MOSS = register("cave_vine_in_moss", WorldGenerator.GROWING_PLANT.configured(new GrowingPlantConfiguration(SimpleWeightedRandomList.<IntProvider>builder().add(UniformInt.of(1, 4), 5).add(UniformInt.of(2, 8), 1).build(), EnumDirection.DOWN, CAVE_VINES_BODY_PROVIDER, CAVE_VINES_HEAD_PROVIDER, false)));
    public static final WorldGenFeatureConfigured<?, ?> CAVE_VINES = register("cave_vines", CAVE_VINE.decorated(WorldGenDecorator.CAVE_SURFACE.configured(new CaveDecoratorConfiguration(CaveSurface.CEILING, 12))).range(BiomeDecoratorGroups.Decorators.RANGE_BOTTOM_TO_60).squared().count(60));
    public static final WorldGenFeatureConfigured<WorldGenFeatureBlockConfiguration, ?> MOSS_VEGETATION = register("moss_vegetation", WorldGenerator.SIMPLE_BLOCK.configured(new WorldGenFeatureBlockConfiguration(new WorldGenFeatureStateProviderWeighted(weightedBlockStateBuilder().add(Blocks.FLOWERING_AZALEA.getBlockData(), 4).add(Blocks.AZALEA.getBlockData(), 7).add(Blocks.MOSS_CARPET.getBlockData(), 25).add(Blocks.GRASS.getBlockData(), 50).add(Blocks.TALL_GRASS.getBlockData(), 10)))));
    public static final WorldGenFeatureConfigured<VegetationPatchConfiguration, ?> MOSS_PATCH = register("moss_patch", WorldGenerator.VEGETATION_PATCH.configured(new VegetationPatchConfiguration(TagsBlock.MOSS_REPLACEABLE.getName(), new WorldGenFeatureStateProviderSimpl(Blocks.MOSS_BLOCK.getBlockData()), () -> {
        return MOSS_VEGETATION;
    }, CaveSurface.FLOOR, ConstantInt.of(1), 0.0F, 5, 0.8F, UniformInt.of(4, 7), 0.3F)));
    public static final WorldGenFeatureConfigured<VegetationPatchConfiguration, ?> MOSS_PATCH_BONEMEAL = register("moss_patch_bonemeal", WorldGenerator.VEGETATION_PATCH.configured(new VegetationPatchConfiguration(TagsBlock.MOSS_REPLACEABLE.getName(), new WorldGenFeatureStateProviderSimpl(Blocks.MOSS_BLOCK.getBlockData()), () -> {
        return MOSS_VEGETATION;
    }, CaveSurface.FLOOR, ConstantInt.of(1), 0.0F, 5, 0.6F, UniformInt.of(1, 2), 0.75F)));
    public static final WorldGenFeatureConfigured<?, ?> LUSH_CAVES_VEGETATION = register("lush_caves_vegetation", MOSS_PATCH.decorated(WorldGenDecorator.CAVE_SURFACE.configured(new CaveDecoratorConfiguration(CaveSurface.FLOOR, 12))).range(BiomeDecoratorGroups.Decorators.RANGE_BOTTOM_TO_60).squared().count(40));
    public static final WorldGenFeatureConfigured<WorldGenFeatureRandom2, ?> DRIPLEAF = register("dripleaf", WorldGenerator.SIMPLE_RANDOM_SELECTOR.configured(new WorldGenFeatureRandom2(ImmutableList.of(BiomeDecoratorGroups::makeSmallDripleaf, () -> {
        return makeDripleaf(EnumDirection.EAST);
    }, () -> {
        return makeDripleaf(EnumDirection.WEST);
    }, () -> {
        return makeDripleaf(EnumDirection.SOUTH);
    }, () -> {
        return makeDripleaf(EnumDirection.NORTH);
    }))));
    public static final WorldGenFeatureConfigured<?, ?> CLAY_WITH_DRIPLEAVES = register("clay_with_dripleaves", WorldGenerator.VEGETATION_PATCH.configured(new VegetationPatchConfiguration(TagsBlock.LUSH_GROUND_REPLACEABLE.getName(), new WorldGenFeatureStateProviderSimpl(Blocks.CLAY.getBlockData()), () -> {
        return DRIPLEAF;
    }, CaveSurface.FLOOR, ConstantInt.of(3), 0.8F, 2, 0.05F, UniformInt.of(4, 7), 0.7F)));
    public static final WorldGenFeatureConfigured<?, ?> CLAY_POOL_WITH_DRIPLEAVES = register("clay_pool_with_dripleaves", WorldGenerator.WATERLOGGED_VEGETATION_PATCH.configured(new VegetationPatchConfiguration(TagsBlock.LUSH_GROUND_REPLACEABLE.getName(), new WorldGenFeatureStateProviderSimpl(Blocks.CLAY.getBlockData()), () -> {
        return DRIPLEAF;
    }, CaveSurface.FLOOR, ConstantInt.of(3), 0.8F, 5, 0.1F, UniformInt.of(4, 7), 0.7F)));
    public static final WorldGenFeatureConfigured<?, ?> LUSH_CAVES_CLAY = register("lush_caves_clay", WorldGenerator.RANDOM_BOOLEAN_SELECTOR.configured(new WorldGenFeatureChoiceConfiguration(() -> {
        return CLAY_WITH_DRIPLEAVES;
    }, () -> {
        return CLAY_POOL_WITH_DRIPLEAVES;
    })).decorated(WorldGenDecorator.CAVE_SURFACE.configured(new CaveDecoratorConfiguration(CaveSurface.FLOOR, 12))).range(BiomeDecoratorGroups.Decorators.RANGE_BOTTOM_TO_60).squared().count(20));
    public static final WorldGenFeatureConfigured<VegetationPatchConfiguration, ?> MOSS_PATCH_CEILING = register("moss_patch_ceiling", WorldGenerator.VEGETATION_PATCH.configured(new VegetationPatchConfiguration(TagsBlock.MOSS_REPLACEABLE.getName(), new WorldGenFeatureStateProviderSimpl(Blocks.MOSS_BLOCK.getBlockData()), () -> {
        return CAVE_VINE_IN_MOSS;
    }, CaveSurface.CEILING, UniformInt.of(1, 2), 0.0F, 5, 0.08F, UniformInt.of(4, 7), 0.3F)));
    public static final WorldGenFeatureConfigured<?, ?> LUSH_CAVES_CEILING_VEGETATION = register("lush_caves_ceiling_vegetation", MOSS_PATCH_CEILING.decorated(WorldGenDecorator.CAVE_SURFACE.configured(new CaveDecoratorConfiguration(CaveSurface.CEILING, 12))).range(BiomeDecoratorGroups.Decorators.RANGE_BOTTOM_TO_60).squared().count(40));
    public static final WorldGenFeatureConfigured<?, ?> SPORE_BLOSSOM_FEATURE = register("spore_blossom", WorldGenerator.SIMPLE_BLOCK.configured(new WorldGenFeatureBlockConfiguration(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SPORE_BLOSSOM))).decorated(WorldGenDecorator.CAVE_SURFACE.configured(new CaveDecoratorConfiguration(CaveSurface.CEILING, 12))).range(BiomeDecoratorGroups.Decorators.RANGE_BOTTOM_TO_60).squared().count(8));
    public static final WorldGenFeatureConfigured<?, ?> CLASSIC_VINES_CAVE_FEATURE = register("classic_vines_cave_feature", WorldGenerator.VINES.configured(WorldGenFeatureConfiguration.NONE).range(BiomeDecoratorGroups.Decorators.RANGE_BOTTOM_TO_60).squared().count(127));
    public static final WorldGenFeatureConfigured<?, ?> AMETHYST_GEODE = register("amethyst_geode", WorldGenerator.GEODE.configured(new GeodeConfiguration(new GeodeBlockSettings(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.AIR), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.AMETHYST_BLOCK), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.BUDDING_AMETHYST), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.CALCITE), new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SMOOTH_BASALT), ImmutableList.of(Blocks.SMALL_AMETHYST_BUD.getBlockData(), Blocks.MEDIUM_AMETHYST_BUD.getBlockData(), Blocks.LARGE_AMETHYST_BUD.getBlockData(), Blocks.AMETHYST_CLUSTER.getBlockData()), TagsBlock.FEATURES_CANNOT_REPLACE.getName(), TagsBlock.GEODE_INVALID_BLOCKS.getName()), new GeodeLayerSettings(1.7D, 2.2D, 3.2D, 4.2D), new GeodeCrackSettings(0.95D, 2.0D, 2), 0.35D, 0.083D, true, UniformInt.of(4, 6), UniformInt.of(3, 4), UniformInt.of(1, 2), -16, 16, 0.05D, 1)).rangeUniform(VerticalAnchor.aboveBottom(6), VerticalAnchor.absolute(46)).squared().rarity(53));

    static SimpleWeightedRandomList.Builder<IBlockData> weightedBlockStateBuilder() {
        return SimpleWeightedRandomList.builder();
    }

    private static WorldGenFeatureConfigured<GrowingPlantConfiguration, ?> makeDripleaf(EnumDirection blockDirection) {
        return WorldGenerator.GROWING_PLANT.configured(new GrowingPlantConfiguration(SimpleWeightedRandomList.<IntProvider>builder().add(UniformInt.of(1, 5), 2).add(ConstantInt.of(1), 1).build(), EnumDirection.UP, new WorldGenFeatureStateProviderSimpl(Blocks.BIG_DRIPLEAF_STEM.getBlockData().set(BlockProperties.HORIZONTAL_FACING, blockDirection)), new WorldGenFeatureStateProviderSimpl(Blocks.BIG_DRIPLEAF.getBlockData().set(BlockProperties.HORIZONTAL_FACING, blockDirection)), true));
    }

    private static WorldGenFeatureConfigured<WorldGenFeatureBlockConfiguration, ?> makeSmallDripleaf() {
        return WorldGenerator.SIMPLE_BLOCK.configured(new WorldGenFeatureBlockConfiguration(new WorldGenFeatureStateProviderWeighted(weightedBlockStateBuilder().add(BiomeDecoratorGroups.States.SMALL_DRIPLEAF_EAST, 1).add(BiomeDecoratorGroups.States.SMALL_DRIPLEAF_WEST, 1).add(BiomeDecoratorGroups.States.SMALL_DRIPLEAF_NORTH, 1).add(BiomeDecoratorGroups.States.SMALL_DRIPLEAF_SOUTH, 1))));
    }

    private static <FC extends WorldGenFeatureConfiguration> WorldGenFeatureConfigured<FC, ?> register(String id, WorldGenFeatureConfigured<FC, ?> configuredFeature) {
        return IRegistry.register(RegistryGeneration.CONFIGURED_FEATURE, id, configuredFeature);
    }

    public static final class Configs {
        public static final WorldGenFeatureRandomPatchConfiguration DEFAULT_GRASS_CONFIG = (new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.GRASS), WorldGenBlockPlacerSimple.INSTANCE)).tries(32).build();
        public static final WorldGenFeatureRandomPatchConfiguration TAIGA_GRASS_CONFIG = (new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderWeighted(BiomeDecoratorGroups.weightedBlockStateBuilder().add(BiomeDecoratorGroups.States.GRASS, 1).add(BiomeDecoratorGroups.States.FERN, 4)), WorldGenBlockPlacerSimple.INSTANCE)).tries(32).build();
        public static final WorldGenFeatureRandomPatchConfiguration JUNGLE_GRASS_CONFIG = (new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderWeighted(BiomeDecoratorGroups.weightedBlockStateBuilder().add(BiomeDecoratorGroups.States.GRASS, 3).add(BiomeDecoratorGroups.States.FERN, 1)), WorldGenBlockPlacerSimple.INSTANCE)).blacklist(ImmutableSet.of(BiomeDecoratorGroups.States.PODZOL)).tries(32).build();
        public static final WorldGenFeatureRandomPatchConfiguration DEFAULT_FLOWER_CONFIG = (new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderWeighted(BiomeDecoratorGroups.weightedBlockStateBuilder().add(BiomeDecoratorGroups.States.POPPY, 2).add(BiomeDecoratorGroups.States.DANDELION, 1)), WorldGenBlockPlacerSimple.INSTANCE)).tries(64).build();
        public static final WorldGenFeatureRandomPatchConfiguration DEAD_BUSH_CONFIG = (new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.DEAD_BUSH), WorldGenBlockPlacerSimple.INSTANCE)).tries(4).build();
        public static final WorldGenFeatureRandomPatchConfiguration SWEET_BERRY_BUSH_CONFIG = (new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SWEET_BERRY_BUSH), WorldGenBlockPlacerSimple.INSTANCE)).tries(64).whitelist(ImmutableSet.of(BiomeDecoratorGroups.States.GRASS_BLOCK.getBlock())).noProjection().build();
        public static final WorldGenFeatureRandomPatchConfiguration TALL_GRASS_CONFIG = (new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.TALL_GRASS), new WorldGenBlockPlacerDoublePlant())).tries(64).noProjection().build();
        public static final WorldGenFeatureRandomPatchConfiguration SUGAR_CANE_CONFIG = (new WorldGenFeatureRandomPatchConfiguration.GrassConfigurationBuilder(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.SUGAR_CANE), new WorldGenBlockPlacerColumn(BiasedToBottomInt.of(2, 4)))).tries(20).xspread(4).yspread(0).zspread(4).noProjection().needWater().build();
        public static final WorldGenFeatureHellFlowingLavaConfiguration LAVA_SPRING_CONFIG = new WorldGenFeatureHellFlowingLavaConfiguration(BiomeDecoratorGroups.States.LAVA_STATE, true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE, Blocks.DEEPSLATE, Blocks.TUFF));
        public static final WorldGenFeatureHellFlowingLavaConfiguration CLOSED_NETHER_SPRING_CONFIG = new WorldGenFeatureHellFlowingLavaConfiguration(BiomeDecoratorGroups.States.LAVA_STATE, false, 5, 0, ImmutableSet.of(Blocks.NETHERRACK));
        public static final WorldGenFeatureBlockPileConfiguration CRIMSON_FOREST_CONFIG = new WorldGenFeatureBlockPileConfiguration(new WorldGenFeatureStateProviderWeighted(BiomeDecoratorGroups.weightedBlockStateBuilder().add(BiomeDecoratorGroups.States.CRIMSON_ROOTS, 87).add(BiomeDecoratorGroups.States.CRIMSON_FUNGUS, 11).add(BiomeDecoratorGroups.States.WARPED_FUNGUS, 1)));
        public static final WorldGenFeatureBlockPileConfiguration WARPED_FOREST_CONFIG = new WorldGenFeatureBlockPileConfiguration(new WorldGenFeatureStateProviderWeighted(BiomeDecoratorGroups.weightedBlockStateBuilder().add(BiomeDecoratorGroups.States.WARPED_ROOTS, 85).add(BiomeDecoratorGroups.States.CRIMSON_ROOTS, 1).add(BiomeDecoratorGroups.States.WARPED_FUNGUS, 13).add(BiomeDecoratorGroups.States.CRIMSON_FUNGUS, 1)));
        public static final WorldGenFeatureBlockPileConfiguration NETHER_SPROUTS_CONFIG = new WorldGenFeatureBlockPileConfiguration(new WorldGenFeatureStateProviderSimpl(BiomeDecoratorGroups.States.NETHER_SPROUTS));
    }

    protected static final class Decorators {
        public static final WorldGenFeatureTreeBeehive BEEHIVE_0002 = new WorldGenFeatureTreeBeehive(0.002F);
        public static final WorldGenFeatureTreeBeehive BEEHIVE_002 = new WorldGenFeatureTreeBeehive(0.02F);
        public static final WorldGenFeatureTreeBeehive BEEHIVE_005 = new WorldGenFeatureTreeBeehive(0.05F);
        public static final WorldGenDecoratorConfigured<HeightmapConfiguration> HEIGHTMAP = WorldGenDecorator.HEIGHTMAP.configured(new HeightmapConfiguration(HeightMap.Type.MOTION_BLOCKING));
        public static final WorldGenDecoratorConfigured<HeightmapConfiguration> HEIGHTMAP_TOP_SOLID = WorldGenDecorator.HEIGHTMAP.configured(new HeightmapConfiguration(HeightMap.Type.OCEAN_FLOOR_WG));
        public static final WorldGenDecoratorConfigured<HeightmapConfiguration> HEIGHTMAP_WORLD_SURFACE = WorldGenDecorator.HEIGHTMAP.configured(new HeightmapConfiguration(HeightMap.Type.WORLD_SURFACE_WG));
        public static final WorldGenDecoratorConfigured<HeightmapConfiguration> HEIGHTMAP_OCEAN_FLOOR = WorldGenDecorator.HEIGHTMAP.configured(new HeightmapConfiguration(HeightMap.Type.OCEAN_FLOOR));
        public static final WorldGenDecoratorConfigured<HeightmapConfiguration> HEIGHTMAP_DOUBLE = WorldGenDecorator.HEIGHTMAP_SPREAD_DOUBLE.configured(new HeightmapConfiguration(HeightMap.Type.MOTION_BLOCKING));
        public static final WorldGenFeatureChanceDecoratorRangeConfiguration FULL_RANGE = new WorldGenFeatureChanceDecoratorRangeConfiguration(UniformHeight.of(VerticalAnchor.bottom(), VerticalAnchor.top()));
        public static final WorldGenFeatureChanceDecoratorRangeConfiguration RANGE_10_10 = new WorldGenFeatureChanceDecoratorRangeConfiguration(UniformHeight.of(VerticalAnchor.aboveBottom(10), VerticalAnchor.belowTop(10)));
        public static final WorldGenFeatureChanceDecoratorRangeConfiguration RANGE_8_8 = new WorldGenFeatureChanceDecoratorRangeConfiguration(UniformHeight.of(VerticalAnchor.aboveBottom(8), VerticalAnchor.belowTop(8)));
        public static final WorldGenFeatureChanceDecoratorRangeConfiguration RANGE_4_4 = new WorldGenFeatureChanceDecoratorRangeConfiguration(UniformHeight.of(VerticalAnchor.aboveBottom(4), VerticalAnchor.belowTop(4)));
        public static final WorldGenFeatureChanceDecoratorRangeConfiguration RANGE_BOTTOM_TO_60 = new WorldGenFeatureChanceDecoratorRangeConfiguration(UniformHeight.of(VerticalAnchor.bottom(), VerticalAnchor.absolute(60)));
        public static final WorldGenDecoratorConfigured<?> FIRE = WorldGenDecorator.RANGE.configured(RANGE_4_4).squared().countRandom(5);
        public static final WorldGenDecoratorConfigured<?> ADD_32 = WorldGenDecorator.SPREAD_32_ABOVE.configured(WorldGenFeatureEmptyConfiguration2.INSTANCE);
        public static final WorldGenDecoratorConfigured<?> HEIGHTMAP_WITH_TREE_THRESHOLD = HEIGHTMAP_OCEAN_FLOOR.decorated(WorldGenDecorator.WATER_DEPTH_THRESHOLD.configured(new WaterDepthThresholdConfiguration(0)));
        public static final WorldGenDecoratorConfigured<?> HEIGHTMAP_WITH_TREE_THRESHOLD_SQUARED = HEIGHTMAP_WITH_TREE_THRESHOLD.squared();
        public static final WorldGenDecoratorConfigured<?> HEIGHTMAP_SQUARE = HEIGHTMAP.squared();
        public static final WorldGenDecoratorConfigured<?> HEIGHTMAP_DOUBLE_SQUARE = HEIGHTMAP_DOUBLE.squared();
        public static final WorldGenDecoratorConfigured<?> TOP_SOLID_HEIGHTMAP_SQUARE = HEIGHTMAP_TOP_SOLID.squared();
        public static final WorldGenDecoratorConfigured<?> DARK_OAK_DECORATOR = HEIGHTMAP_WITH_TREE_THRESHOLD.decorated(WorldGenDecorator.DARK_OAK_TREE.configured(WorldGenFeatureDecoratorConfiguration.NONE));
    }

    public static final class States {
        protected static final IBlockData GRASS = Blocks.GRASS.getBlockData();
        protected static final IBlockData FERN = Blocks.FERN.getBlockData();
        protected static final IBlockData PODZOL = Blocks.PODZOL.getBlockData();
        protected static final IBlockData COARSE_DIRT = Blocks.COARSE_DIRT.getBlockData();
        protected static final IBlockData MYCELIUM = Blocks.MYCELIUM.getBlockData();
        protected static final IBlockData SNOW_BLOCK = Blocks.SNOW_BLOCK.getBlockData();
        protected static final IBlockData ICE = Blocks.ICE.getBlockData();
        protected static final IBlockData OAK_LOG = Blocks.OAK_LOG.getBlockData();
        protected static final IBlockData OAK_LEAVES = Blocks.OAK_LEAVES.getBlockData();
        protected static final IBlockData OAK_SAPLING = Blocks.OAK_SAPLING.getBlockData();
        protected static final IBlockData JUNGLE_LOG = Blocks.JUNGLE_LOG.getBlockData();
        protected static final IBlockData JUNGLE_LEAVES = Blocks.JUNGLE_LEAVES.getBlockData();
        protected static final IBlockData JUNGLE_SAPLING = Blocks.JUNGLE_SAPLING.getBlockData();
        protected static final IBlockData SPRUCE_LOG = Blocks.SPRUCE_LOG.getBlockData();
        protected static final IBlockData SPRUCE_LEAVES = Blocks.SPRUCE_LEAVES.getBlockData();
        protected static final IBlockData SPRUCE_SAPLING = Blocks.SPRUCE_SAPLING.getBlockData();
        protected static final IBlockData ACACIA_LOG = Blocks.ACACIA_LOG.getBlockData();
        protected static final IBlockData ACACIA_LEAVES = Blocks.ACACIA_LEAVES.getBlockData();
        protected static final IBlockData ACACIA_SAPLING = Blocks.ACACIA_SAPLING.getBlockData();
        protected static final IBlockData BIRCH_LOG = Blocks.BIRCH_LOG.getBlockData();
        protected static final IBlockData BIRCH_LEAVES = Blocks.BIRCH_LEAVES.getBlockData();
        protected static final IBlockData BIRCH_SAPLING = Blocks.BIRCH_SAPLING.getBlockData();
        protected static final IBlockData DARK_OAK_LOG = Blocks.DARK_OAK_LOG.getBlockData();
        protected static final IBlockData DARK_OAK_LEAVES = Blocks.DARK_OAK_LEAVES.getBlockData();
        protected static final IBlockData DARK_OAK_SAPLING = Blocks.DARK_OAK_SAPLING.getBlockData();
        protected static final IBlockData GRASS_BLOCK = Blocks.GRASS_BLOCK.getBlockData();
        protected static final IBlockData LARGE_FERN = Blocks.LARGE_FERN.getBlockData();
        protected static final IBlockData TALL_GRASS = Blocks.TALL_GRASS.getBlockData();
        protected static final IBlockData LILAC = Blocks.LILAC.getBlockData();
        protected static final IBlockData ROSE_BUSH = Blocks.ROSE_BUSH.getBlockData();
        protected static final IBlockData PEONY = Blocks.PEONY.getBlockData();
        protected static final IBlockData BROWN_MUSHROOM = Blocks.BROWN_MUSHROOM.getBlockData();
        protected static final IBlockData RED_MUSHROOM = Blocks.RED_MUSHROOM.getBlockData();
        protected static final IBlockData PACKED_ICE = Blocks.PACKED_ICE.getBlockData();
        protected static final IBlockData BLUE_ICE = Blocks.BLUE_ICE.getBlockData();
        protected static final IBlockData LILY_OF_THE_VALLEY = Blocks.LILY_OF_THE_VALLEY.getBlockData();
        protected static final IBlockData BLUE_ORCHID = Blocks.BLUE_ORCHID.getBlockData();
        protected static final IBlockData POPPY = Blocks.POPPY.getBlockData();
        protected static final IBlockData DANDELION = Blocks.DANDELION.getBlockData();
        protected static final IBlockData DEAD_BUSH = Blocks.DEAD_BUSH.getBlockData();
        protected static final IBlockData MELON = Blocks.MELON.getBlockData();
        protected static final IBlockData PUMPKIN = Blocks.PUMPKIN.getBlockData();
        protected static final IBlockData SWEET_BERRY_BUSH = Blocks.SWEET_BERRY_BUSH.getBlockData().set(BlockSweetBerryBush.AGE, Integer.valueOf(3));
        protected static final IBlockData FIRE = Blocks.FIRE.getBlockData();
        protected static final IBlockData SOUL_FIRE = Blocks.SOUL_FIRE.getBlockData();
        protected static final IBlockData NETHERRACK = Blocks.NETHERRACK.getBlockData();
        protected static final IBlockData SOUL_SOIL = Blocks.SOUL_SOIL.getBlockData();
        protected static final IBlockData CRIMSON_ROOTS = Blocks.CRIMSON_ROOTS.getBlockData();
        protected static final IBlockData LILY_PAD = Blocks.LILY_PAD.getBlockData();
        protected static final IBlockData SNOW = Blocks.SNOW.getBlockData();
        protected static final IBlockData JACK_O_LANTERN = Blocks.JACK_O_LANTERN.getBlockData();
        protected static final IBlockData SUNFLOWER = Blocks.SUNFLOWER.getBlockData();
        protected static final IBlockData CACTUS = Blocks.CACTUS.getBlockData();
        protected static final IBlockData SUGAR_CANE = Blocks.SUGAR_CANE.getBlockData();
        protected static final IBlockData HUGE_RED_MUSHROOM = Blocks.RED_MUSHROOM_BLOCK.getBlockData().set(BlockHugeMushroom.DOWN, Boolean.valueOf(false));
        protected static final IBlockData HUGE_BROWN_MUSHROOM = Blocks.BROWN_MUSHROOM_BLOCK.getBlockData().set(BlockHugeMushroom.UP, Boolean.valueOf(true)).set(BlockHugeMushroom.DOWN, Boolean.valueOf(false));
        protected static final IBlockData HUGE_MUSHROOM_STEM = Blocks.MUSHROOM_STEM.getBlockData().set(BlockHugeMushroom.UP, Boolean.valueOf(false)).set(BlockHugeMushroom.DOWN, Boolean.valueOf(false));
        protected static final Fluid WATER_STATE = FluidTypes.WATER.defaultFluidState();
        protected static final Fluid LAVA_STATE = FluidTypes.LAVA.defaultFluidState();
        protected static final IBlockData WATER = Blocks.WATER.getBlockData();
        protected static final IBlockData LAVA = Blocks.LAVA.getBlockData();
        protected static final IBlockData DIRT = Blocks.DIRT.getBlockData();
        protected static final IBlockData GRAVEL = Blocks.GRAVEL.getBlockData();
        protected static final IBlockData GRANITE = Blocks.GRANITE.getBlockData();
        protected static final IBlockData DIORITE = Blocks.DIORITE.getBlockData();
        protected static final IBlockData ANDESITE = Blocks.ANDESITE.getBlockData();
        protected static final IBlockData COAL_ORE = Blocks.COAL_ORE.getBlockData();
        protected static final IBlockData DEEPSLATE_COAL_ORE = Blocks.DEEPSLATE_COAL_ORE.getBlockData();
        protected static final IBlockData COPPER_ORE = Blocks.COPPER_ORE.getBlockData();
        protected static final IBlockData DEEPSLATE_COPPER_ORE = Blocks.DEEPSLATE_COPPER_ORE.getBlockData();
        protected static final IBlockData IRON_ORE = Blocks.IRON_ORE.getBlockData();
        protected static final IBlockData DEEPSLATE_IRON_ORE = Blocks.DEEPSLATE_IRON_ORE.getBlockData();
        protected static final IBlockData GOLD_ORE = Blocks.GOLD_ORE.getBlockData();
        protected static final IBlockData DEEPSLATE_GOLD_ORE = Blocks.DEEPSLATE_GOLD_ORE.getBlockData();
        protected static final IBlockData REDSTONE_ORE = Blocks.REDSTONE_ORE.getBlockData();
        protected static final IBlockData DEEPSLATE_REDSTONE_ORE = Blocks.DEEPSLATE_REDSTONE_ORE.getBlockData();
        protected static final IBlockData DIAMOND_ORE = Blocks.DIAMOND_ORE.getBlockData();
        protected static final IBlockData DEEPSLATE_DIAMOND_ORE = Blocks.DEEPSLATE_DIAMOND_ORE.getBlockData();
        protected static final IBlockData LAPIS_ORE = Blocks.LAPIS_ORE.getBlockData();
        protected static final IBlockData DEEPSLATE_LAPIS_ORE = Blocks.DEEPSLATE_LAPIS_ORE.getBlockData();
        protected static final IBlockData STONE = Blocks.STONE.getBlockData();
        protected static final IBlockData EMERALD_ORE = Blocks.EMERALD_ORE.getBlockData();
        protected static final IBlockData DEEPSLATE_EMERALD_ORE = Blocks.DEEPSLATE_EMERALD_ORE.getBlockData();
        protected static final IBlockData INFESTED_STONE = Blocks.INFESTED_STONE.getBlockData();
        protected static final IBlockData INFESTED_DEEPSLATE = Blocks.INFESTED_DEEPSLATE.getBlockData();
        protected static final IBlockData SAND = Blocks.SAND.getBlockData();
        protected static final IBlockData CLAY = Blocks.CLAY.getBlockData();
        protected static final IBlockData MOSSY_COBBLESTONE = Blocks.MOSSY_COBBLESTONE.getBlockData();
        protected static final IBlockData SEAGRASS = Blocks.SEAGRASS.getBlockData();
        protected static final IBlockData MAGMA_BLOCK = Blocks.MAGMA_BLOCK.getBlockData();
        protected static final IBlockData SOUL_SAND = Blocks.SOUL_SAND.getBlockData();
        protected static final IBlockData NETHER_GOLD_ORE = Blocks.NETHER_GOLD_ORE.getBlockData();
        protected static final IBlockData NETHER_QUARTZ_ORE = Blocks.NETHER_QUARTZ_ORE.getBlockData();
        protected static final IBlockData BLACKSTONE = Blocks.BLACKSTONE.getBlockData();
        protected static final IBlockData ANCIENT_DEBRIS = Blocks.ANCIENT_DEBRIS.getBlockData();
        protected static final IBlockData BASALT = Blocks.BASALT.getBlockData();
        protected static final IBlockData CRIMSON_FUNGUS = Blocks.CRIMSON_FUNGUS.getBlockData();
        protected static final IBlockData WARPED_FUNGUS = Blocks.WARPED_FUNGUS.getBlockData();
        protected static final IBlockData WARPED_ROOTS = Blocks.WARPED_ROOTS.getBlockData();
        protected static final IBlockData NETHER_SPROUTS = Blocks.NETHER_SPROUTS.getBlockData();
        protected static final IBlockData AIR = Blocks.AIR.getBlockData();
        protected static final IBlockData AMETHYST_BLOCK = Blocks.AMETHYST_BLOCK.getBlockData();
        protected static final IBlockData BUDDING_AMETHYST = Blocks.BUDDING_AMETHYST.getBlockData();
        protected static final IBlockData CALCITE = Blocks.CALCITE.getBlockData();
        protected static final IBlockData SMOOTH_BASALT = Blocks.SMOOTH_BASALT.getBlockData();
        protected static final IBlockData TUFF = Blocks.TUFF.getBlockData();
        protected static final IBlockData SPORE_BLOSSOM = Blocks.SPORE_BLOSSOM.getBlockData();
        protected static final IBlockData SMALL_DRIPLEAF_EAST = Blocks.SMALL_DRIPLEAF.getBlockData().set(BlockDripleafSmall.FACING, EnumDirection.EAST);
        protected static final IBlockData SMALL_DRIPLEAF_WEST = Blocks.SMALL_DRIPLEAF.getBlockData().set(BlockDripleafSmall.FACING, EnumDirection.WEST);
        protected static final IBlockData SMALL_DRIPLEAF_NORTH = Blocks.SMALL_DRIPLEAF.getBlockData().set(BlockDripleafSmall.FACING, EnumDirection.NORTH);
        protected static final IBlockData SMALL_DRIPLEAF_SOUTH = Blocks.SMALL_DRIPLEAF.getBlockData().set(BlockDripleafSmall.FACING, EnumDirection.SOUTH);
        protected static final IBlockData BIG_DRIPLEAF_EAST = Blocks.BIG_DRIPLEAF.getBlockData().set(BlockDripleafBig.FACING, EnumDirection.EAST);
        protected static final IBlockData BIG_DRIPLEAF_WEST = Blocks.BIG_DRIPLEAF.getBlockData().set(BlockDripleafBig.FACING, EnumDirection.WEST);
        protected static final IBlockData BIG_DRIPLEAF_NORTH = Blocks.BIG_DRIPLEAF.getBlockData().set(BlockDripleafBig.FACING, EnumDirection.NORTH);
        protected static final IBlockData BIG_DRIPLEAF_SOUTH = Blocks.BIG_DRIPLEAF.getBlockData().set(BlockDripleafBig.FACING, EnumDirection.SOUTH);
        protected static final IBlockData DEEPSLATE = Blocks.DEEPSLATE.getBlockData();
        protected static final IBlockData AZALEA_LEAVES = Blocks.AZALEA_LEAVES.getBlockData();
        protected static final IBlockData FLOWERING_AZALEA_LEAVES = Blocks.FLOWERING_AZALEA_LEAVES.getBlockData();
        protected static final IBlockData AZALEA = Blocks.AZALEA.getBlockData();
    }
}
